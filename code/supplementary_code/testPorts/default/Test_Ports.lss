
Test_Ports.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  0000017c  000001f0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000050  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000016c  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e1  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e2  00000000  00000000  000004ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e7  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  000007b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000007df  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_16>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e7       	ldi	r30, 0x7C	; 124
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 30       	cpi	r26, 0x04	; 4
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  a6:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_16>:


//**********************************************************
//timer 0 overflow ISR
ISR (TIMER0_COMPA_vect) 
begin      
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  //Decrement the time if not already zero
  if (time0>0)	--time0;
  bc:	80 91 02 01 	lds	r24, 0x0102
  c0:	90 91 03 01 	lds	r25, 0x0103
  c4:	18 16       	cp	r1, r24
  c6:	19 06       	cpc	r1, r25
  c8:	4c f4       	brge	.+18     	; 0xdc <__vector_16+0x2e>
  ca:	80 91 02 01 	lds	r24, 0x0102
  ce:	90 91 03 01 	lds	r25, 0x0103
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	90 93 03 01 	sts	0x0103, r25
  d8:	80 93 02 01 	sts	0x0102, r24
end  
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <initialize>:
end


//***************************** ***************************** 
void initialize(void)
begin
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	90 93 6e 00 	sts	0x006E, r25
           
  //set up timer 0 for 1 mSec timebase 
  TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
  OCR0A = 249;  		//set the compare re to 250 time ticks
  f0:	89 ef       	ldi	r24, 0xF9	; 249
  f2:	87 bd       	out	0x27, r24	; 39
  //set prescalar to divide by 64 
  TCCR0B= 3; //0b00001011;	
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	85 bd       	out	0x25, r24	; 37
  // turn on clear-on-match
  TCCR0A= (1<<WGM01) ;
  f8:	94 bd       	out	0x24, r25	; 36

  //set up timer1 for full speed and
  //capture an edge on analog comparator pin B.3 
  //Set capture to positive edge, full counting rate
  TCCR1B = (1<<ICES1) + 1; 
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	80 93 81 00 	sts	0x0081, r24
  // Turn on timer1 interrupt-on-capture
  TIMSK1 = (1<<ICIE1) ;
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	80 93 6f 00 	sts	0x006F, r24

  
  //Set up port A	
  DDRA=0xFF;
 106:	9f ef       	ldi	r25, 0xFF	; 255
 108:	91 b9       	out	0x01, r25	; 1
  PORTA=0x01;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	82 b9       	out	0x02, r24	; 2

  //Set up port B	
  DDRB=0xFF;
 10e:	94 b9       	out	0x04, r25	; 4
  PORTB=0x01;
 110:	85 b9       	out	0x05, r24	; 5
  
  //Set up port C	
  DDRC=0xFF;
 112:	97 b9       	out	0x07, r25	; 7
  PORTC=0x01;
 114:	88 b9       	out	0x08, r24	; 8
  
  //Set up port D
  DDRD=0xFF;
 116:	9a b9       	out	0x0a, r25	; 10
  PORTD=0x00;
 118:	1b b8       	out	0x0b, r1	; 11
  //Set up port E
  //DDRE=0xFF;
  //PORTE=0x01;

  //crank up the ISRs
  sei();
 11a:	78 94       	sei

end  
 11c:	08 95       	ret

0000011e <main>:


//**********************************************************       
//Entry point and task scheduler loop
int main(void)
begin  
 11e:	0e 94 75 00 	call	0xea	; 0xea <initialize>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 122:	20 e9       	ldi	r18, 0x90	; 144
 124:	31 e0       	ldi	r19, 0x01	; 1
  //while(1);
  
  // main task scheduler loop
  while(1)
  begin
  	counter = counter + 1;
 126:	80 91 00 01 	lds	r24, 0x0100
 12a:	90 91 01 01 	lds	r25, 0x0101
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 01 01 	sts	0x0101, r25
 134:	80 93 00 01 	sts	0x0100, r24
	//if (counter%2 == 0)
	//	PORTD = 0xFF;
	//else
	//	PORTD = 0xFB;
	circularShift(PORTA);
 138:	92 b1       	in	r25, 0x02	; 2
 13a:	82 b1       	in	r24, 0x02	; 2
 13c:	99 0f       	add	r25, r25
 13e:	88 1f       	adc	r24, r24
 140:	88 27       	eor	r24, r24
 142:	88 1f       	adc	r24, r24
 144:	98 2b       	or	r25, r24
 146:	92 b9       	out	0x02, r25	; 2
	circularShift(PORTB);
 148:	95 b1       	in	r25, 0x05	; 5
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	99 0f       	add	r25, r25
 14e:	88 1f       	adc	r24, r24
 150:	88 27       	eor	r24, r24
 152:	88 1f       	adc	r24, r24
 154:	98 2b       	or	r25, r24
 156:	95 b9       	out	0x05, r25	; 5
	circularShift(PORTC);
 158:	98 b1       	in	r25, 0x08	; 8
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	99 0f       	add	r25, r25
 15e:	88 1f       	adc	r24, r24
 160:	88 27       	eor	r24, r24
 162:	88 1f       	adc	r24, r24
 164:	98 2b       	or	r25, r24
 166:	98 b9       	out	0x08, r25	; 8
 168:	80 e1       	ldi	r24, 0x10	; 16
 16a:	97 e2       	ldi	r25, 0x27	; 39
 16c:	f9 01       	movw	r30, r18
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 172:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 174:	d9 f7       	brne	.-10     	; 0x16c <main+0x4e>
 176:	d7 cf       	rjmp	.-82     	; 0x126 <main+0x8>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
