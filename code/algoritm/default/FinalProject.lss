
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00001a04  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a04  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  0080015e  00001a62  00001ad6  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000452  00000000  00000000  00001b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c47  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000042d  00000000  00000000  00002bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e24  00000000  00000000  00002ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00003e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c9  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001af  00000000  00000000  000043c9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_13>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_15>
      40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_16>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d0 e1       	ldi	r29, 0x10	; 16
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 e0       	ldi	r30, 0x04	; 4
      84:	fa e1       	ldi	r31, 0x1A	; 26
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	ae 35       	cpi	r26, 0x5E	; 94
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	12 e0       	ldi	r17, 0x02	; 2
      94:	ae e5       	ldi	r26, 0x5E	; 94
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a2 31       	cpi	r26, 0x12	; 18
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 97 03 	call	0x72e	; 0x72e <main>
      a6:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_13>:
//**********************************************************
//Turns on motor on overflow
//This is the up time of the PWM
//**********************************************************
ISR (TIMER1_COMPA_vect)
{
      ae:	1f 92       	push	r1
      b0:	0f 92       	push	r0
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	0f 92       	push	r0
      b6:	11 24       	eor	r1, r1
enableMask = 0x00;
      b8:	10 92 d1 01 	sts	0x01D1, r1
}
      bc:	0f 90       	pop	r0
      be:	0f be       	out	0x3f, r0	; 63
      c0:	0f 90       	pop	r0
      c2:	1f 90       	pop	r1
      c4:	18 95       	reti

000000c6 <__vector_15>:
//**********************************************************
//Turns off motor on match with OCR0A
//This is the down time of the PWM
//**********************************************************
ISR (TIMER1_OVF_vect)
{
      c6:	1f 92       	push	r1
      c8:	0f 92       	push	r0
      ca:	0f b6       	in	r0, 0x3f	; 63
      cc:	0f 92       	push	r0
      ce:	11 24       	eor	r1, r1
      d0:	8f 93       	push	r24
enableMask = 0x02;
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	80 93 d1 01 	sts	0x01D1, r24
}
      d8:	8f 91       	pop	r24
      da:	0f 90       	pop	r0
      dc:	0f be       	out	0x3f, r0	; 63
      de:	0f 90       	pop	r0
      e0:	1f 90       	pop	r1
      e2:	18 95       	reti

000000e4 <__vector_16>:
//**********************************************************
//timer 0 overflow ISR
//**********************************************************

ISR (TIMER0_COMPA_vect) 
begin      
      e4:	1f 92       	push	r1
      e6:	0f 92       	push	r0
      e8:	0f b6       	in	r0, 0x3f	; 63
      ea:	0f 92       	push	r0
      ec:	11 24       	eor	r1, r1
      ee:	8f 93       	push	r24
      f0:	9f 93       	push	r25
  //Decrement the time if not already zero
  if (time0>0)	--time0;
      f2:	80 91 f7 01 	lds	r24, 0x01F7
      f6:	90 91 f8 01 	lds	r25, 0x01F8
      fa:	18 16       	cp	r1, r24
      fc:	19 06       	cpc	r1, r25
      fe:	4c f4       	brge	.+18     	; 0x112 <__vector_16+0x2e>
     100:	80 91 f7 01 	lds	r24, 0x01F7
     104:	90 91 f8 01 	lds	r25, 0x01F8
     108:	01 97       	sbiw	r24, 0x01	; 1
     10a:	90 93 f8 01 	sts	0x01F8, r25
     10e:	80 93 f7 01 	sts	0x01F7, r24
  if (time1>0)	--time1;
     112:	80 91 ea 01 	lds	r24, 0x01EA
     116:	90 91 eb 01 	lds	r25, 0x01EB
     11a:	18 16       	cp	r1, r24
     11c:	19 06       	cpc	r1, r25
     11e:	4c f4       	brge	.+18     	; 0x132 <__vector_16+0x4e>
     120:	80 91 ea 01 	lds	r24, 0x01EA
     124:	90 91 eb 01 	lds	r25, 0x01EB
     128:	01 97       	sbiw	r24, 0x01	; 1
     12a:	90 93 eb 01 	sts	0x01EB, r25
     12e:	80 93 ea 01 	sts	0x01EA, r24
  if (time2>0)	--time2;
     132:	80 91 08 02 	lds	r24, 0x0208
     136:	90 91 09 02 	lds	r25, 0x0209
     13a:	18 16       	cp	r1, r24
     13c:	19 06       	cpc	r1, r25
     13e:	4c f4       	brge	.+18     	; 0x152 <__vector_16+0x6e>
     140:	80 91 08 02 	lds	r24, 0x0208
     144:	90 91 09 02 	lds	r25, 0x0209
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	90 93 09 02 	sts	0x0209, r25
     14e:	80 93 08 02 	sts	0x0208, r24
  if (time3>0)  --time3;
     152:	80 91 fc 01 	lds	r24, 0x01FC
     156:	90 91 fd 01 	lds	r25, 0x01FD
     15a:	18 16       	cp	r1, r24
     15c:	19 06       	cpc	r1, r25
     15e:	4c f4       	brge	.+18     	; 0x172 <__vector_16+0x8e>
     160:	80 91 fc 01 	lds	r24, 0x01FC
     164:	90 91 fd 01 	lds	r25, 0x01FD
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	90 93 fd 01 	sts	0x01FD, r25
     16e:	80 93 fc 01 	sts	0x01FC, r24
end
     172:	9f 91       	pop	r25
     174:	8f 91       	pop	r24
     176:	0f 90       	pop	r0
     178:	0f be       	out	0x3f, r0	; 63
     17a:	0f 90       	pop	r0
     17c:	1f 90       	pop	r1
     17e:	18 95       	reti

00000180 <getDistance>:
//********************************************************** 
//getDistance
//gets distance from the 3 sensors mounted in the order - Front, side, rear
//********************************************************** 
void getDistance()
{
     180:	80 91 7a 00 	lds	r24, 0x007A
     184:	80 64       	ori	r24, 0x40	; 64
     186:	80 93 7a 00 	sts	0x007A, r24
//	fprintf(stdout,"distCounter: %d \n\r", distCounter);
//start conversion
	ADCSRA |= (1<<ADSC);	

	//wait till the ADC is done
	while (ADCSRA & (1 << ADSC)) {};
     18a:	80 91 7a 00 	lds	r24, 0x007A
     18e:	86 fd       	sbrc	r24, 6
     190:	fc cf       	rjmp	.-8      	; 0x18a <getDistance+0xa>

	//read the value of the Voltage
	Din = ADCH;
     192:	80 91 79 00 	lds	r24, 0x0079
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	90 93 f0 01 	sts	0x01F0, r25
     19c:	80 93 ef 01 	sts	0x01EF, r24
	Vin = Din/100
	Din = 100*Vin
	*/

	//display distance on hyperterm
	if (distCounter == 0)
     1a0:	80 91 dc 01 	lds	r24, 0x01DC
     1a4:	90 91 dd 01 	lds	r25, 0x01DD
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	d9 f5       	brne	.+118    	; 0x222 <getDistance+0xa2>
		{
		//forward 4-30cm sensor, sensor 2
		if(Din < 150)
     1ac:	80 91 ef 01 	lds	r24, 0x01EF
     1b0:	90 91 f0 01 	lds	r25, 0x01F0
     1b4:	86 39       	cpi	r24, 0x96	; 150
     1b6:	91 05       	cpc	r25, r1
     1b8:	98 f4       	brcc	.+38     	; 0x1e0 <getDistance+0x60>
			{
			if (Din < 120)
     1ba:	80 91 ef 01 	lds	r24, 0x01EF
     1be:	90 91 f0 01 	lds	r25, 0x01F0
     1c2:	88 37       	cpi	r24, 0x78	; 120
     1c4:	91 05       	cpc	r25, r1
     1c6:	18 f4       	brcc	.+6      	; 0x1ce <getDistance+0x4e>
				{
				distance = 60;
     1c8:	8c e3       	ldi	r24, 0x3C	; 60
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	14 c0       	rjmp	.+40     	; 0x1f6 <getDistance+0x76>
				}
			else
				{
				distance= 1274/(Din - 6);
     1ce:	60 91 ef 01 	lds	r22, 0x01EF
     1d2:	70 91 f0 01 	lds	r23, 0x01F0
     1d6:	66 50       	subi	r22, 0x06	; 6
     1d8:	70 40       	sbci	r23, 0x00	; 0
     1da:	8a ef       	ldi	r24, 0xFA	; 250
     1dc:	94 e0       	ldi	r25, 0x04	; 4
     1de:	08 c0       	rjmp	.+16     	; 0x1f0 <getDistance+0x70>
				}
			}
		else	
			{
			distance= 976/(Din - 38);
     1e0:	60 91 ef 01 	lds	r22, 0x01EF
     1e4:	70 91 f0 01 	lds	r23, 0x01F0
     1e8:	66 52       	subi	r22, 0x26	; 38
     1ea:	70 40       	sbci	r23, 0x00	; 0
     1ec:	80 ed       	ldi	r24, 0xD0	; 208
     1ee:	93 e0       	ldi	r25, 0x03	; 3
     1f0:	0e 94 b5 0c 	call	0x196a	; 0x196a <__udivmodhi4>
     1f4:	cb 01       	movw	r24, r22
     1f6:	90 93 da 01 	sts	0x01DA, r25
     1fa:	80 93 d9 01 	sts	0x01D9, r24
			}
		ADMUX = 0xE1;
     1fe:	81 ee       	ldi	r24, 0xE1	; 225
     200:	80 93 7c 00 	sts	0x007C, r24
		//fprintf(stdout,"Front Distance = %d \n\r", distance) ;
		distCounter = distCounter + 1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	90 93 dd 01 	sts	0x01DD, r25
     20c:	80 93 dc 01 	sts	0x01DC, r24
		fDistance = distance;
     210:	80 91 d9 01 	lds	r24, 0x01D9
     214:	90 91 da 01 	lds	r25, 0x01DA
     218:	90 93 ff 01 	sts	0x01FF, r25
     21c:	80 93 fe 01 	sts	0x01FE, r24
     220:	08 95       	ret
		}
	else if (distCounter == 1)
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	01 f5       	brne	.+64     	; 0x266 <getDistance+0xe6>
		{
		//side 10-80cm sensor, sensor 2
		distance= 2414/(Din - 15);
     226:	60 91 ef 01 	lds	r22, 0x01EF
     22a:	70 91 f0 01 	lds	r23, 0x01F0
     22e:	6f 50       	subi	r22, 0x0F	; 15
     230:	70 40       	sbci	r23, 0x00	; 0
     232:	8e e6       	ldi	r24, 0x6E	; 110
     234:	99 e0       	ldi	r25, 0x09	; 9
     236:	0e 94 b5 0c 	call	0x196a	; 0x196a <__udivmodhi4>
     23a:	70 93 da 01 	sts	0x01DA, r23
     23e:	60 93 d9 01 	sts	0x01D9, r22
		ADMUX = 0xE2;
     242:	82 ee       	ldi	r24, 0xE2	; 226
     244:	80 93 7c 00 	sts	0x007C, r24
		//fprintf(stdout,"Side Distance = %d \n\r", distance) ;
 		distCounter = distCounter + 1;
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	90 93 dd 01 	sts	0x01DD, r25
     250:	80 93 dc 01 	sts	0x01DC, r24
		sDistance = distance;
     254:	80 91 d9 01 	lds	r24, 0x01D9
     258:	90 91 da 01 	lds	r25, 0x01DA
     25c:	90 93 07 02 	sts	0x0207, r25
     260:	80 93 06 02 	sts	0x0206, r24
     264:	08 95       	ret
		}
	else
		{
		//rear 4-30cm sensor, sensor 1
		if(Din < 125)
     266:	80 91 ef 01 	lds	r24, 0x01EF
     26a:	90 91 f0 01 	lds	r25, 0x01F0
     26e:	8d 37       	cpi	r24, 0x7D	; 125
     270:	91 05       	cpc	r25, r1
     272:	90 f4       	brcc	.+36     	; 0x298 <getDistance+0x118>
			{
			if (Din < 20)
     274:	80 91 ef 01 	lds	r24, 0x01EF
     278:	90 91 f0 01 	lds	r25, 0x01F0
     27c:	44 97       	sbiw	r24, 0x14	; 20
     27e:	18 f4       	brcc	.+6      	; 0x286 <getDistance+0x106>
				{
				distance = 60;
     280:	8c e3       	ldi	r24, 0x3C	; 60
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	14 c0       	rjmp	.+40     	; 0x2ae <getDistance+0x12e>
				}
			else
				{
				distance= 1181/(Din - 9);
     286:	60 91 ef 01 	lds	r22, 0x01EF
     28a:	70 91 f0 01 	lds	r23, 0x01F0
     28e:	69 50       	subi	r22, 0x09	; 9
     290:	70 40       	sbci	r23, 0x00	; 0
     292:	8d e9       	ldi	r24, 0x9D	; 157
     294:	94 e0       	ldi	r25, 0x04	; 4
     296:	08 c0       	rjmp	.+16     	; 0x2a8 <getDistance+0x128>
				}
			}
		else
			{
			distance= 896/(Din - 40);
     298:	60 91 ef 01 	lds	r22, 0x01EF
     29c:	70 91 f0 01 	lds	r23, 0x01F0
     2a0:	68 52       	subi	r22, 0x28	; 40
     2a2:	70 40       	sbci	r23, 0x00	; 0
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	93 e0       	ldi	r25, 0x03	; 3
     2a8:	0e 94 b5 0c 	call	0x196a	; 0x196a <__udivmodhi4>
     2ac:	cb 01       	movw	r24, r22
     2ae:	90 93 da 01 	sts	0x01DA, r25
     2b2:	80 93 d9 01 	sts	0x01D9, r24
			}
		ADMUX = 0xE0;
     2b6:	80 ee       	ldi	r24, 0xE0	; 224
     2b8:	80 93 7c 00 	sts	0x007C, r24
		//fprintf(stdout,"Rear Distance = %d \n\r", distance) ;
		distCounter = 0;
     2bc:	10 92 dd 01 	sts	0x01DD, r1
     2c0:	10 92 dc 01 	sts	0x01DC, r1
		rDistance = distance;
     2c4:	80 91 d9 01 	lds	r24, 0x01D9
     2c8:	90 91 da 01 	lds	r25, 0x01DA
     2cc:	90 93 ca 01 	sts	0x01CA, r25
     2d0:	80 93 c9 01 	sts	0x01C9, r24
     2d4:	08 95       	ret

000002d6 <masterStateMachine>:
//********************************************************** 
//masterStateMachine
//State machine which controls actual motion of the car
//********************************************************** 
void masterStateMachine(void)
{
     2d6:	20 91 d7 01 	lds	r18, 0x01D7
     2da:	30 91 d8 01 	lds	r19, 0x01D8
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	22 0f       	add	r18, r18
     2e4:	33 1f       	adc	r19, r19
     2e6:	80 91 f5 01 	lds	r24, 0x01F5
     2ea:	90 91 f6 01 	lds	r25, 0x01F6
     2ee:	28 0f       	add	r18, r24
     2f0:	39 1f       	adc	r19, r25
     2f2:	25 30       	cpi	r18, 0x05	; 5
     2f4:	31 05       	cpc	r19, r1
     2f6:	a9 f1       	breq	.+106    	; 0x362 <masterStateMachine+0x8c>
     2f8:	26 30       	cpi	r18, 0x06	; 6
     2fa:	31 05       	cpc	r19, r1
     2fc:	70 f4       	brcc	.+28     	; 0x31a <masterStateMachine+0x44>
     2fe:	21 30       	cpi	r18, 0x01	; 1
     300:	31 05       	cpc	r19, r1
     302:	01 f1       	breq	.+64     	; 0x344 <masterStateMachine+0x6e>
     304:	21 30       	cpi	r18, 0x01	; 1
     306:	31 05       	cpc	r19, r1
     308:	c8 f0       	brcs	.+50     	; 0x33c <masterStateMachine+0x66>
     30a:	22 30       	cpi	r18, 0x02	; 2
     30c:	31 05       	cpc	r19, r1
     30e:	f9 f0       	breq	.+62     	; 0x34e <masterStateMachine+0x78>
     310:	24 30       	cpi	r18, 0x04	; 4
     312:	31 05       	cpc	r19, r1
     314:	09 f0       	breq	.+2      	; 0x318 <masterStateMachine+0x42>
     316:	3f c0       	rjmp	.+126    	; 0x396 <masterStateMachine+0xc0>
     318:	1f c0       	rjmp	.+62     	; 0x358 <masterStateMachine+0x82>
     31a:	28 30       	cpi	r18, 0x08	; 8
     31c:	31 05       	cpc	r19, r1
     31e:	59 f1       	breq	.+86     	; 0x376 <masterStateMachine+0xa0>
     320:	29 30       	cpi	r18, 0x09	; 9
     322:	31 05       	cpc	r19, r1
     324:	20 f4       	brcc	.+8      	; 0x32e <masterStateMachine+0x58>
     326:	26 30       	cpi	r18, 0x06	; 6
     328:	31 05       	cpc	r19, r1
     32a:	a9 f5       	brne	.+106    	; 0x396 <masterStateMachine+0xc0>
     32c:	1f c0       	rjmp	.+62     	; 0x36c <masterStateMachine+0x96>
     32e:	29 30       	cpi	r18, 0x09	; 9
     330:	31 05       	cpc	r19, r1
     332:	31 f1       	breq	.+76     	; 0x380 <masterStateMachine+0xaa>
     334:	2a 30       	cpi	r18, 0x0A	; 10
     336:	31 05       	cpc	r19, r1
     338:	71 f5       	brne	.+92     	; 0x396 <masterStateMachine+0xc0>
     33a:	28 c0       	rjmp	.+80     	; 0x38c <masterStateMachine+0xb6>
end

//**********************************************************
void stop(void)
begin
	bridgeInput =0x00;		//stop:			00,00
     33c:	10 92 db 01 	sts	0x01DB, r1
	PORTC= 0xFF;
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	22 c0       	rjmp	.+68     	; 0x388 <masterStateMachine+0xb2>
*/

//********************************************************** 
void turnLeft(void)
begin
	bridgeInput = 0xA0;	//turn left:	hl,lr: 10,00
     344:	80 ea       	ldi	r24, 0xA0	; 160
     346:	80 93 db 01 	sts	0x01DB, r24
	PORTC= 0xF7;
     34a:	87 ef       	ldi	r24, 0xF7	; 247
     34c:	1d c0       	rjmp	.+58     	; 0x388 <masterStateMachine+0xb2>
end

//********************************************************** 
void turnRight(void)
begin
	bridgeInput = 0x60;	//turn right:	hr,ll: 01,00
     34e:	80 e6       	ldi	r24, 0x60	; 96
     350:	80 93 db 01 	sts	0x01DB, r24
	PORTC= 0xFB;
     354:	8b ef       	ldi	r24, 0xFB	; 251
     356:	18 c0       	rjmp	.+48     	; 0x388 <masterStateMachine+0xb2>
end

//********************************************************** 
void forward(void)
begin
	bridgeInput = 0x0A;	//forward:		hl,lr: 00,10
     358:	8a e0       	ldi	r24, 0x0A	; 10
     35a:	80 93 db 01 	sts	0x01DB, r24
	PORTC= 0xFD;
     35e:	8d ef       	ldi	r24, 0xFD	; 253
     360:	13 c0       	rjmp	.+38     	; 0x388 <masterStateMachine+0xb2>
end

//********************************************************** 
void forwardLeft(void)
begin
	bridgeInput = (0x0A)|(0xA0);	
     362:	8a ea       	ldi	r24, 0xAA	; 170
     364:	80 93 db 01 	sts	0x01DB, r24
    //forward:		hl,lr: 00,10
    //turn left:	hl,lr: 10,00
	PORTC= 0xF5;
     368:	85 ef       	ldi	r24, 0xF5	; 245
     36a:	0e c0       	rjmp	.+28     	; 0x388 <masterStateMachine+0xb2>
end

//********************************************************** 
void forwardRight(void)
begin
	bridgeInput = (0x0A)|(0x60);	
     36c:	8a e6       	ldi	r24, 0x6A	; 106
     36e:	80 93 db 01 	sts	0x01DB, r24
    //forward:		hl,lr: 00,10
	//turn right:	hr,ll: 01,00
	PORTC= 0xF9;
     372:	89 ef       	ldi	r24, 0xF9	; 249
     374:	09 c0       	rjmp	.+18     	; 0x388 <masterStateMachine+0xb2>
end

//********************************************************** 
void reverse(void)
begin
	bridgeInput = 0x06;	//reverse:		hr,ll: 00,01
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	80 93 db 01 	sts	0x01DB, r24
	PORTC= 0xFE;
     37c:	8e ef       	ldi	r24, 0xFE	; 254
     37e:	04 c0       	rjmp	.+8      	; 0x388 <masterStateMachine+0xb2>
end

//********************************************************** 
void reverseLeft(void)
begin
	bridgeInput = (0x06)|(0xA0);
     380:	86 ea       	ldi	r24, 0xA6	; 166
     382:	80 93 db 01 	sts	0x01DB, r24
	//reverse:		hr,ll: 00,01
	//turn left:	hl,lr: 10,00
	PORTC= 0xF6;
     386:	86 ef       	ldi	r24, 0xF6	; 246
     388:	88 b9       	out	0x08, r24	; 8
     38a:	08 95       	ret
end

//********************************************************** 
void reverseRight(void)
begin
	 bridgeInput = (0x06)|(0x60);
     38c:	86 e6       	ldi	r24, 0x66	; 102
     38e:	80 93 db 01 	sts	0x01DB, r24
	//reverse:		hr,ll: 00,01
	//turn right:	hr,ll: 01,00
	PORTC= 0xFA;
     392:	8a ef       	ldi	r24, 0xFA	; 250
     394:	88 b9       	out	0x08, r24	; 8
     396:	08 95       	ret

00000398 <fbStateMachine>:
//********************************************************** 
//fbStateMachine
//State machine which determines the forward backward motion of the car
//********************************************************** 
void fbStateMachine(void)
{
     398:	20 91 d3 01 	lds	r18, 0x01D3
     39c:	30 91 d4 01 	lds	r19, 0x01D4
     3a0:	22 30       	cpi	r18, 0x02	; 2
     3a2:	31 05       	cpc	r19, r1
     3a4:	69 f1       	breq	.+90     	; 0x400 <fbStateMachine+0x68>
     3a6:	23 30       	cpi	r18, 0x03	; 3
     3a8:	31 05       	cpc	r19, r1
     3aa:	40 f4       	brcc	.+16     	; 0x3bc <fbStateMachine+0x24>
     3ac:	21 15       	cp	r18, r1
     3ae:	31 05       	cpc	r19, r1
     3b0:	69 f0       	breq	.+26     	; 0x3cc <fbStateMachine+0x34>
     3b2:	21 30       	cpi	r18, 0x01	; 1
     3b4:	31 05       	cpc	r19, r1
     3b6:	09 f0       	breq	.+2      	; 0x3ba <fbStateMachine+0x22>
     3b8:	6b c0       	rjmp	.+214    	; 0x490 <fbStateMachine+0xf8>
     3ba:	1b c0       	rjmp	.+54     	; 0x3f2 <fbStateMachine+0x5a>
     3bc:	23 30       	cpi	r18, 0x03	; 3
     3be:	31 05       	cpc	r19, r1
     3c0:	a1 f1       	breq	.+104    	; 0x42a <fbStateMachine+0x92>
     3c2:	24 30       	cpi	r18, 0x04	; 4
     3c4:	31 05       	cpc	r19, r1
     3c6:	09 f0       	breq	.+2      	; 0x3ca <fbStateMachine+0x32>
     3c8:	63 c0       	rjmp	.+198    	; 0x490 <fbStateMachine+0xf8>
     3ca:	45 c0       	rjmp	.+138    	; 0x456 <fbStateMachine+0xbe>
    switch (fb.state)
    {
    case 0: //Rest State
            if (isForward)
     3cc:	80 91 e9 01 	lds	r24, 0x01E9
     3d0:	88 23       	and	r24, r24
     3d2:	19 f0       	breq	.+6      	; 0x3da <fbStateMachine+0x42>
               fb.nextState = 1;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <fbStateMachine+0x50>
            else if (isReverse)
     3da:	80 91 ee 01 	lds	r24, 0x01EE
     3de:	88 23       	and	r24, r24
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <fbStateMachine+0x4c>
     3e2:	4e c0       	rjmp	.+156    	; 0x480 <fbStateMachine+0xe8>
               fb.nextState = 3;
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	90 93 d6 01 	sts	0x01D6, r25
     3ec:	80 93 d5 01 	sts	0x01D5, r24
     3f0:	4b c0       	rjmp	.+150    	; 0x488 <fbStateMachine+0xf0>
               fb.nextState = 0;
			   fb.controlBits = 0;
            break;

    case 1: //Go Forward
            if (isForward)
     3f2:	80 91 e9 01 	lds	r24, 0x01E9
     3f6:	88 23       	and	r24, r24
     3f8:	79 f4       	brne	.+30     	; 0x418 <fbStateMachine+0x80>
               fb.nextState = 1;
               fb.controlBits = 1;
               }
            else
               {
               fb.nextState = 2;
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	22 c0       	rjmp	.+68     	; 0x444 <fbStateMachine+0xac>
               }
            break;

    case 2: //0.5second Reverse to stop the car
			//0.5second delay
			if (timerCounter < 1)
     400:	80 91 e6 01 	lds	r24, 0x01E6
     404:	90 91 e7 01 	lds	r25, 0x01E7
     408:	89 2b       	or	r24, r25
     40a:	d1 f5       	brne	.+116    	; 0x480 <fbStateMachine+0xe8>
				{
				timerCounter = timerCounter + 1;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	90 93 e7 01 	sts	0x01E7, r25
     414:	80 93 e6 01 	sts	0x01E6, r24
				fb.nextState = 2;
     418:	30 93 d6 01 	sts	0x01D6, r19
     41c:	20 93 d5 01 	sts	0x01D5, r18
				fb.controlBits =2;
     420:	30 93 d8 01 	sts	0x01D8, r19
     424:	20 93 d7 01 	sts	0x01D7, r18
     428:	33 c0       	rjmp	.+102    	; 0x490 <fbStateMachine+0xf8>
				fb.controlBits = 0;
				}
            break;

    case 3: //Reverse   
            if (isReverse)
     42a:	80 91 ee 01 	lds	r24, 0x01EE
     42e:	88 23       	and	r24, r24
     430:	39 f0       	breq	.+14     	; 0x440 <fbStateMachine+0xa8>
               {
               fb.nextState = 3;
     432:	30 93 d6 01 	sts	0x01D6, r19
     436:	20 93 d5 01 	sts	0x01D5, r18
               fb.controlBits = 2;
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	1b c0       	rjmp	.+54     	; 0x476 <fbStateMachine+0xde>
               }
            else
               {
               fb.nextState = 4;
     440:	84 e0       	ldi	r24, 0x04	; 4
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 d6 01 	sts	0x01D6, r25
     448:	80 93 d5 01 	sts	0x01D5, r24
			   timerCounter = 0;
     44c:	10 92 e7 01 	sts	0x01E7, r1
     450:	10 92 e6 01 	sts	0x01E6, r1
     454:	1d c0       	rjmp	.+58     	; 0x490 <fbStateMachine+0xf8>
               }
            break;       

    case 4: //0.1second Forward to stop the car
			//0.1second delay 
			if (timerCounter < 1)
     456:	80 91 e6 01 	lds	r24, 0x01E6
     45a:	90 91 e7 01 	lds	r25, 0x01E7
     45e:	89 2b       	or	r24, r25
     460:	79 f4       	brne	.+30     	; 0x480 <fbStateMachine+0xe8>
				{
				timerCounter = timerCounter + 1;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	90 93 e7 01 	sts	0x01E7, r25
     46a:	80 93 e6 01 	sts	0x01E6, r24
				fb.nextState = 4;
     46e:	30 93 d6 01 	sts	0x01D6, r19
     472:	20 93 d5 01 	sts	0x01D5, r18
				fb.controlBits =1;
     476:	90 93 d8 01 	sts	0x01D8, r25
     47a:	80 93 d7 01 	sts	0x01D7, r24
     47e:	08 c0       	rjmp	.+16     	; 0x490 <fbStateMachine+0xf8>
				}
			else
				{
				fb.nextState = 0;
     480:	10 92 d6 01 	sts	0x01D6, r1
     484:	10 92 d5 01 	sts	0x01D5, r1
				fb.controlBits = 0;
     488:	10 92 d8 01 	sts	0x01D8, r1
     48c:	10 92 d7 01 	sts	0x01D7, r1
				}
            break;
    }
	fb.state = fb.nextState;  
     490:	80 91 d5 01 	lds	r24, 0x01D5
     494:	90 91 d6 01 	lds	r25, 0x01D6
     498:	90 93 d4 01 	sts	0x01D4, r25
     49c:	80 93 d3 01 	sts	0x01D3, r24
}
     4a0:	08 95       	ret

000004a2 <lrStateMachine>:
//********************************************************** 
//lrStateMachine
//State machine which determines the left right motion of the car
//********************************************************** 
void lrStateMachine(void)
{
     4a2:	20 91 f1 01 	lds	r18, 0x01F1
     4a6:	30 91 f2 01 	lds	r19, 0x01F2
     4aa:	22 30       	cpi	r18, 0x02	; 2
     4ac:	31 05       	cpc	r19, r1
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <lrStateMachine+0x10>
     4b0:	4b c0       	rjmp	.+150    	; 0x548 <lrStateMachine+0xa6>
     4b2:	23 30       	cpi	r18, 0x03	; 3
     4b4:	31 05       	cpc	r19, r1
     4b6:	40 f4       	brcc	.+16     	; 0x4c8 <lrStateMachine+0x26>
     4b8:	21 15       	cp	r18, r1
     4ba:	31 05       	cpc	r19, r1
     4bc:	69 f0       	breq	.+26     	; 0x4d8 <lrStateMachine+0x36>
     4be:	21 30       	cpi	r18, 0x01	; 1
     4c0:	31 05       	cpc	r19, r1
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <lrStateMachine+0x24>
     4c4:	49 c0       	rjmp	.+146    	; 0x558 <lrStateMachine+0xb6>
     4c6:	1a c0       	rjmp	.+52     	; 0x4fc <lrStateMachine+0x5a>
     4c8:	23 30       	cpi	r18, 0x03	; 3
     4ca:	31 05       	cpc	r19, r1
     4cc:	39 f1       	breq	.+78     	; 0x51c <lrStateMachine+0x7a>
     4ce:	24 30       	cpi	r18, 0x04	; 4
     4d0:	31 05       	cpc	r19, r1
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <lrStateMachine+0x34>
     4d4:	41 c0       	rjmp	.+130    	; 0x558 <lrStateMachine+0xb6>
     4d6:	38 c0       	rjmp	.+112    	; 0x548 <lrStateMachine+0xa6>
    switch (lr.state)
    {
    case 0: //Rest State
            if (isLeft)
     4d8:	80 91 d2 01 	lds	r24, 0x01D2
     4dc:	88 23       	and	r24, r24
     4de:	19 f0       	breq	.+6      	; 0x4e6 <lrStateMachine+0x44>
               lr.nextState = 1;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <lrStateMachine+0x50>
            else if (isRight)
     4e6:	80 91 c8 01 	lds	r24, 0x01C8
     4ea:	88 23       	and	r24, r24
     4ec:	69 f1       	breq	.+90     	; 0x548 <lrStateMachine+0xa6>
               lr.nextState = 3;
     4ee:	83 e0       	ldi	r24, 0x03	; 3
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	90 93 f4 01 	sts	0x01F4, r25
     4f6:	80 93 f3 01 	sts	0x01F3, r24
     4fa:	2a c0       	rjmp	.+84     	; 0x550 <lrStateMachine+0xae>
               lr.nextState = 0;
			   lr.controlBits = 0;
            break;

    case 1: //Move Left
            if (isLeft)
     4fc:	80 91 d2 01 	lds	r24, 0x01D2
     500:	88 23       	and	r24, r24
     502:	49 f0       	breq	.+18     	; 0x516 <lrStateMachine+0x74>
               {
               lr.nextState = 1;
     504:	30 93 f4 01 	sts	0x01F4, r19
     508:	20 93 f3 01 	sts	0x01F3, r18
               lr.controlBits = 1;
     50c:	30 93 f6 01 	sts	0x01F6, r19
     510:	20 93 f5 01 	sts	0x01F5, r18
     514:	21 c0       	rjmp	.+66     	; 0x558 <lrStateMachine+0xb6>
               }
            else
               {
               lr.nextState = 2;
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	11 c0       	rjmp	.+34     	; 0x53e <lrStateMachine+0x9c>
            lr.nextState = 0;
			lr.controlBits = 0;
            break;

    case 3: //Move Right   
            if (isRight)
     51c:	80 91 c8 01 	lds	r24, 0x01C8
     520:	88 23       	and	r24, r24
     522:	59 f0       	breq	.+22     	; 0x53a <lrStateMachine+0x98>
               {
               lr.nextState = 3;
     524:	30 93 f4 01 	sts	0x01F4, r19
     528:	20 93 f3 01 	sts	0x01F3, r18
               lr.controlBits = 2;
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	90 93 f6 01 	sts	0x01F6, r25
     534:	80 93 f5 01 	sts	0x01F5, r24
     538:	0f c0       	rjmp	.+30     	; 0x558 <lrStateMachine+0xb6>
               }
            else
               {
               lr.nextState = 4;
     53a:	84 e0       	ldi	r24, 0x04	; 4
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	90 93 f4 01 	sts	0x01F4, r25
     542:	80 93 f3 01 	sts	0x01F3, r24
     546:	08 c0       	rjmp	.+16     	; 0x558 <lrStateMachine+0xb6>
               }
            break;       

    case 4: //1second Forward to stop the car
			//1second delay 
            lr.nextState = 0;
     548:	10 92 f4 01 	sts	0x01F4, r1
     54c:	10 92 f3 01 	sts	0x01F3, r1
			lr.controlBits = 0;
     550:	10 92 f6 01 	sts	0x01F6, r1
     554:	10 92 f5 01 	sts	0x01F5, r1
            break;
    }
	lr.state = lr.nextState;  
     558:	80 91 f3 01 	lds	r24, 0x01F3
     55c:	90 91 f4 01 	lds	r25, 0x01F4
     560:	90 93 f2 01 	sts	0x01F2, r25
     564:	80 93 f1 01 	sts	0x01F1, r24
}
     568:	08 95       	ret

0000056a <setMovement>:
//**********************************************************
// setMovement
// sets the appropriate flags to move the car in desired direction
//********************************************************** 
void setMovement(int a, int b, int c, int d)
{
     56a:	80 93 e9 01 	sts	0x01E9, r24
	isForward = a;
	isReverse = b;
     56e:	60 93 ee 01 	sts	0x01EE, r22
	isLeft = c;
     572:	40 93 d2 01 	sts	0x01D2, r20
	isRight = d;
     576:	20 93 c8 01 	sts	0x01C8, r18
}
     57a:	08 95       	ret

0000057c <turnLeft>:
(lower # in a (1,2) or (3,4) combination goes to the live wire
*/

//********************************************************** 
void turnLeft(void)
begin
     57c:	80 ea       	ldi	r24, 0xA0	; 160
     57e:	80 93 db 01 	sts	0x01DB, r24
	bridgeInput = 0xA0;	//turn left:	hl,lr: 10,00
	PORTC= 0xF7;
     582:	87 ef       	ldi	r24, 0xF7	; 247
     584:	88 b9       	out	0x08, r24	; 8
end
     586:	08 95       	ret

00000588 <turnRight>:

//********************************************************** 
void turnRight(void)
begin
     588:	80 e6       	ldi	r24, 0x60	; 96
     58a:	80 93 db 01 	sts	0x01DB, r24
	bridgeInput = 0x60;	//turn right:	hr,ll: 01,00
	PORTC= 0xFB;
     58e:	8b ef       	ldi	r24, 0xFB	; 251
     590:	88 b9       	out	0x08, r24	; 8
end
     592:	08 95       	ret

00000594 <forward>:

//********************************************************** 
void forward(void)
begin
     594:	8a e0       	ldi	r24, 0x0A	; 10
     596:	80 93 db 01 	sts	0x01DB, r24
	bridgeInput = 0x0A;	//forward:		hl,lr: 00,10
	PORTC= 0xFD;
     59a:	8d ef       	ldi	r24, 0xFD	; 253
     59c:	88 b9       	out	0x08, r24	; 8
end
     59e:	08 95       	ret

000005a0 <reverse>:

//********************************************************** 
void reverse(void)
begin
     5a0:	86 e0       	ldi	r24, 0x06	; 6
     5a2:	80 93 db 01 	sts	0x01DB, r24
	bridgeInput = 0x06;	//reverse:		hr,ll: 00,01
	PORTC= 0xFE;
     5a6:	8e ef       	ldi	r24, 0xFE	; 254
     5a8:	88 b9       	out	0x08, r24	; 8
end
     5aa:	08 95       	ret

000005ac <stop>:

//**********************************************************
void stop(void)
begin
     5ac:	10 92 db 01 	sts	0x01DB, r1
	bridgeInput =0x00;		//stop:			00,00
	PORTC= 0xFF;
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	88 b9       	out	0x08, r24	; 8
end
     5b4:	08 95       	ret

000005b6 <forwardLeft>:

//********************************************************** 
void forwardLeft(void)
begin
     5b6:	8a ea       	ldi	r24, 0xAA	; 170
     5b8:	80 93 db 01 	sts	0x01DB, r24
	bridgeInput = (0x0A)|(0xA0);	
    //forward:		hl,lr: 00,10
    //turn left:	hl,lr: 10,00
	PORTC= 0xF5;
     5bc:	85 ef       	ldi	r24, 0xF5	; 245
     5be:	88 b9       	out	0x08, r24	; 8
end
     5c0:	08 95       	ret

000005c2 <forwardRight>:

//********************************************************** 
void forwardRight(void)
begin
     5c2:	8a e6       	ldi	r24, 0x6A	; 106
     5c4:	80 93 db 01 	sts	0x01DB, r24
	bridgeInput = (0x0A)|(0x60);	
    //forward:		hl,lr: 00,10
	//turn right:	hr,ll: 01,00
	PORTC= 0xF9;
     5c8:	89 ef       	ldi	r24, 0xF9	; 249
     5ca:	88 b9       	out	0x08, r24	; 8
end
     5cc:	08 95       	ret

000005ce <reverseLeft>:

//********************************************************** 
void reverseLeft(void)
begin
     5ce:	86 ea       	ldi	r24, 0xA6	; 166
     5d0:	80 93 db 01 	sts	0x01DB, r24
	bridgeInput = (0x06)|(0xA0);
	//reverse:		hr,ll: 00,01
	//turn left:	hl,lr: 10,00
	PORTC= 0xF6;
     5d4:	86 ef       	ldi	r24, 0xF6	; 246
     5d6:	88 b9       	out	0x08, r24	; 8
end
     5d8:	08 95       	ret

000005da <reverseRight>:

//********************************************************** 
void reverseRight(void)
begin
     5da:	86 e6       	ldi	r24, 0x66	; 102
     5dc:	80 93 db 01 	sts	0x01DB, r24
	 bridgeInput = (0x06)|(0x60);
	//reverse:		hr,ll: 00,01
	//turn right:	hr,ll: 01,00
	PORTC= 0xFA;
     5e0:	8a ef       	ldi	r24, 0xFA	; 250
     5e2:	88 b9       	out	0x08, r24	; 8
end
     5e4:	08 95       	ret

000005e6 <initialize>:


//********************************************************** 
void initialize(void)
begin
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	90 93 6e 00 	sts	0x006E, r25

  /************** TIMER INITIALIZAIONS ********************/    
  //TIMER0
  //set up timer 0 for 1 mSec timebase 
  TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
  OCR0A = 249;  		//set the compare re to 250 time ticks
     5ec:	89 ef       	ldi	r24, 0xF9	; 249
     5ee:	87 bd       	out	0x27, r24	; 39
  //set prescalar to divide by 64 
  TCCR0B= 3; //0b00001011;	
     5f0:	23 e0       	ldi	r18, 0x03	; 3
     5f2:	25 bd       	out	0x25, r18	; 37
  // turn on clear-on-match
  TCCR0A= (1<<WGM01) ;
     5f4:	94 bd       	out	0x24, r25	; 36

  //TIMER1	
  //sets motor speed to zero
  OCR1A = 38000;	
     5f6:	80 e7       	ldi	r24, 0x70	; 112
     5f8:	94 e9       	ldi	r25, 0x94	; 148
     5fa:	90 93 89 00 	sts	0x0089, r25
     5fe:	80 93 88 00 	sts	0x0088, r24
  //turns on interrupt vectors for timer0
  TIMSK1 = (1<<OCIE1A)|(1<<TOIE1) ;	//turn on ISR
     602:	20 93 6f 00 	sts	0x006F, r18
  // timer 0 prescalar to 64 
  TCCR1B = 1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	80 93 81 00 	sts	0x0081, r24

  /************** ADC INITIALIZAIONS **********************/ 
  //Set up ADC
  ADMUX = 0xE2; //Internal 2.56 reference voltage, with capactiance at AREF
     60c:	82 ee       	ldi	r24, 0xE2	; 226
     60e:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = 0x87; //enable on, start conversion off, clock = SYSCLK/128
     612:	87 e8       	ldi	r24, 0x87	; 135
     614:	80 93 7a 00 	sts	0x007A, r24

  /************** PORT INITIALIZAIONS *********************/ 
  //Set up port A
  //for pushbuttons to test moveement control of car	
  DDRA=0x00;
     618:	11 b8       	out	0x01, r1	; 1
  PINA=0;
     61a:	10 b8       	out	0x00, r1	; 0

  //Set up port B
  //output to H-Bridge
  DDRB=0xFF;
     61c:	8f ef       	ldi	r24, 0xFF	; 255
     61e:	84 b9       	out	0x04, r24	; 4
  PORTB=0x00;
     620:	15 b8       	out	0x05, r1	; 5

  //Set up port C
  //LEDs for testing
  DDRC=0xFF;
     622:	87 b9       	out	0x07, r24	; 7
  PORTC=0xFF;
     624:	88 b9       	out	0x08, r24	; 8

  //Set up port D
  //detected parking lot
  DDRD = 0xFF;
     626:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x00;
     628:	1b b8       	out	0x0b, r1	; 11

  /************** SOFTWARE INITIALIZAIONS *****************/ 
  //Structure instances
  park.state = 0;
     62a:	10 92 cc 01 	sts	0x01CC, r1
     62e:	10 92 cb 01 	sts	0x01CB, r1
  park.nextState  = 0;
     632:	10 92 ce 01 	sts	0x01CE, r1
     636:	10 92 cd 01 	sts	0x01CD, r1
  park.controlBits = 0;
     63a:	10 92 d0 01 	sts	0x01D0, r1
     63e:	10 92 cf 01 	sts	0x01CF, r1

  move.state = 0;
     642:	10 92 df 01 	sts	0x01DF, r1
     646:	10 92 de 01 	sts	0x01DE, r1
  move.nextState  = 0;
     64a:	10 92 e1 01 	sts	0x01E1, r1
     64e:	10 92 e0 01 	sts	0x01E0, r1
  move.controlBits = 0;
     652:	10 92 e3 01 	sts	0x01E3, r1
     656:	10 92 e2 01 	sts	0x01E2, r1

  fb.state = 0;
     65a:	10 92 d4 01 	sts	0x01D4, r1
     65e:	10 92 d3 01 	sts	0x01D3, r1
  fb.nextState  = 0;
     662:	10 92 d6 01 	sts	0x01D6, r1
     666:	10 92 d5 01 	sts	0x01D5, r1
  fb.controlBits = 0;
     66a:	10 92 d8 01 	sts	0x01D8, r1
     66e:	10 92 d7 01 	sts	0x01D7, r1

  lr.state = 0;
     672:	10 92 f2 01 	sts	0x01F2, r1
     676:	10 92 f1 01 	sts	0x01F1, r1
  lr.nextState  = 0;
     67a:	10 92 f4 01 	sts	0x01F4, r1
     67e:	10 92 f3 01 	sts	0x01F3, r1
  lr.controlBits = 0;
     682:	10 92 f6 01 	sts	0x01F6, r1
     686:	10 92 f5 01 	sts	0x01F5, r1
  
  detect.state = 0;
     68a:	10 92 01 02 	sts	0x0201, r1
     68e:	10 92 00 02 	sts	0x0200, r1
  detect.nextState  = 0;
     692:	10 92 03 02 	sts	0x0203, r1
     696:	10 92 02 02 	sts	0x0202, r1
  detect.controlBits = 0;
     69a:	10 92 05 02 	sts	0x0205, r1
     69e:	10 92 04 02 	sts	0x0204, r1

  //counters
  simulationCounter = 0;
     6a2:	10 92 e5 01 	sts	0x01E5, r1
     6a6:	10 92 e4 01 	sts	0x01E4, r1
  distCounter = 0;
     6aa:	10 92 dd 01 	sts	0x01DD, r1
     6ae:	10 92 dc 01 	sts	0x01DC, r1
  delayCounter = 0;
     6b2:	10 92 ed 01 	sts	0x01ED, r1
     6b6:	10 92 ec 01 	sts	0x01EC, r1
  timerCounter = 0;
     6ba:	10 92 e7 01 	sts	0x01E7, r1
     6be:	10 92 e6 01 	sts	0x01E6, r1
  startupCounter  = 0;
     6c2:	10 92 0b 02 	sts	0x020B, r1
     6c6:	10 92 0a 02 	sts	0x020A, r1

  //distance
  sDistance = 0;
     6ca:	10 92 07 02 	sts	0x0207, r1
     6ce:	10 92 06 02 	sts	0x0206, r1
  rDistance = 0;
     6d2:	10 92 ca 01 	sts	0x01CA, r1
     6d6:	10 92 c9 01 	sts	0x01C9, r1
  fDistance = 0;
     6da:	10 92 ff 01 	sts	0x01FF, r1
     6de:	10 92 fe 01 	sts	0x01FE, r1
  parkingLotWidth = 0;
     6e2:	10 92 fb 01 	sts	0x01FB, r1
     6e6:	10 92 fa 01 	sts	0x01FA, r1

  //booleans
  isForward = 0;
     6ea:	10 92 e9 01 	sts	0x01E9, r1
  isReverse = 0;
     6ee:	10 92 ee 01 	sts	0x01EE, r1
  isLeft = 0;
     6f2:	10 92 d2 01 	sts	0x01D2, r1
  isRight = 0;
     6f6:	10 92 c8 01 	sts	0x01C8, r1
  isParkingLot = 0;
     6fa:	10 92 e8 01 	sts	0x01E8, r1

  bridgeInput = 0x00;
     6fe:	10 92 db 01 	sts	0x01DB, r1

  //UART initializations 	
  uart_init();
     702:	0e 94 8c 07 	call	0xf18	; 0xf18 <uart_init>
  stdout = stdin = stderr = &uart_str;
     706:	6e e0       	ldi	r22, 0x0E	; 14
     708:	71 e0       	ldi	r23, 0x01	; 1
     70a:	70 93 11 02 	sts	0x0211, r23
     70e:	60 93 10 02 	sts	0x0210, r22
     712:	70 93 0d 02 	sts	0x020D, r23
     716:	60 93 0c 02 	sts	0x020C, r22
     71a:	70 93 0f 02 	sts	0x020F, r23
     71e:	60 93 0e 02 	sts	0x020E, r22
  fprintf(stdout,"Starting...\n\r");
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 8f 08 	call	0x111e	; 0x111e <fputs>

  //crank up the ISRs
  sei();
     72a:	78 94       	sei

end  
     72c:	08 95       	ret

0000072e <main>:


//**********************************************************       
//Entry point and task scheduler loop
int main(void)
{  
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
  initialize();
     73a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <initialize>
	PORTB = (bridgeInput) & (~enableMask);
	PORTD = ((~isParkingLot)<<2);	
	if (isParkingLot)
		PORTD = 0xFB;
	else
		PORTD = 0xFF;
     73e:	ee 24       	eor	r14, r14
     740:	ea 94       	dec	r14
  while(1)
  {
	PORTB = (bridgeInput) & (~enableMask);
	PORTD = ((~isParkingLot)<<2);	
	if (isParkingLot)
		PORTD = 0xFB;
     742:	9b ef       	ldi	r25, 0xFB	; 251
     744:	f9 2e       	mov	r15, r25
	getDistance();

	//left-right
	if (time0 == 0)
		{
		time0=t0;
     746:	c2 e3       	ldi	r28, 0x32	; 50
     748:	d0 e0       	ldi	r29, 0x00	; 0
		fbStateMachine();
		}
	//move car and park if space is found
	if (time2 == 0) 
		{
		time2=t2;
     74a:	04 e6       	ldi	r16, 0x64	; 100
     74c:	10 e0       	ldi	r17, 0x00	; 0
{  
  initialize();
  // main task scheduler loop
  while(1)
  {
	PORTB = (bridgeInput) & (~enableMask);
     74e:	90 91 db 01 	lds	r25, 0x01DB
     752:	80 91 d1 01 	lds	r24, 0x01D1
     756:	80 95       	com	r24
     758:	89 23       	and	r24, r25
     75a:	85 b9       	out	0x05, r24	; 5
	PORTD = ((~isParkingLot)<<2);	
     75c:	90 91 e8 01 	lds	r25, 0x01E8
     760:	89 2f       	mov	r24, r25
     762:	80 95       	com	r24
     764:	88 0f       	add	r24, r24
     766:	88 0f       	add	r24, r24
     768:	8b b9       	out	0x0b, r24	; 11
	if (isParkingLot)
     76a:	99 23       	and	r25, r25
     76c:	11 f0       	breq	.+4      	; 0x772 <main+0x44>
		PORTD = 0xFB;
     76e:	fb b8       	out	0x0b, r15	; 11
     770:	01 c0       	rjmp	.+2      	; 0x774 <main+0x46>
	else
		PORTD = 0xFF;
     772:	eb b8       	out	0x0b, r14	; 11
	//PORTD = dum;

	getDistance();
     774:	0e 94 c0 00 	call	0x180	; 0x180 <getDistance>

	//left-right
	if (time0 == 0)
     778:	80 91 f7 01 	lds	r24, 0x01F7
     77c:	90 91 f8 01 	lds	r25, 0x01F8
     780:	89 2b       	or	r24, r25
     782:	31 f4       	brne	.+12     	; 0x790 <main+0x62>
		{
		time0=t0;
     784:	d0 93 f8 01 	sts	0x01F8, r29
     788:	c0 93 f7 01 	sts	0x01F7, r28
		//getDistance();
		lrStateMachine();
     78c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lrStateMachine>
		}
	//forward reverse
	if (time1 == 0)
     790:	80 91 ea 01 	lds	r24, 0x01EA
     794:	90 91 eb 01 	lds	r25, 0x01EB
     798:	89 2b       	or	r24, r25
     79a:	31 f4       	brne	.+12     	; 0x7a8 <main+0x7a>
		{
		time1=t1;
     79c:	d0 93 eb 01 	sts	0x01EB, r29
     7a0:	c0 93 ea 01 	sts	0x01EA, r28
		fbStateMachine();
     7a4:	0e 94 cc 01 	call	0x398	; 0x398 <fbStateMachine>
		}
	//move car and park if space is found
	if (time2 == 0) 
     7a8:	80 91 08 02 	lds	r24, 0x0208
     7ac:	90 91 09 02 	lds	r25, 0x0209
     7b0:	89 2b       	or	r24, r25
     7b2:	31 f4       	brne	.+12     	; 0x7c0 <main+0x92>
		{
		time2=t2;
     7b4:	10 93 09 02 	sts	0x0209, r17
     7b8:	00 93 08 02 	sts	0x0208, r16
		moveCar();
     7bc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <moveCar>
	/*if (time3 == 0)
		{
		time3 = t3;
		
		}*/
	masterStateMachine();
     7c0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <masterStateMachine>
     7c4:	c4 cf       	rjmp	.-120    	; 0x74e <main+0x20>

000007c6 <detectParking>:

//********************************************************** 
//detectParking
//**********************************************************
void detectParking (void)
{
     7c6:	40 91 00 02 	lds	r20, 0x0200
     7ca:	50 91 01 02 	lds	r21, 0x0201
     7ce:	42 30       	cpi	r20, 0x02	; 2
     7d0:	51 05       	cpc	r21, r1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <detectParking+0x10>
     7d4:	47 c0       	rjmp	.+142    	; 0x864 <detectParking+0x9e>
     7d6:	43 30       	cpi	r20, 0x03	; 3
     7d8:	51 05       	cpc	r21, r1
     7da:	40 f4       	brcc	.+16     	; 0x7ec <detectParking+0x26>
     7dc:	41 15       	cp	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	91 f0       	breq	.+36     	; 0x806 <detectParking+0x40>
     7e2:	41 30       	cpi	r20, 0x01	; 1
     7e4:	51 05       	cpc	r21, r1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <detectParking+0x24>
     7e8:	d3 c0       	rjmp	.+422    	; 0x990 <detectParking+0x1ca>
     7ea:	23 c0       	rjmp	.+70     	; 0x832 <detectParking+0x6c>
     7ec:	44 30       	cpi	r20, 0x04	; 4
     7ee:	51 05       	cpc	r21, r1
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <detectParking+0x2e>
     7f2:	90 c0       	rjmp	.+288    	; 0x914 <detectParking+0x14e>
     7f4:	44 30       	cpi	r20, 0x04	; 4
     7f6:	51 05       	cpc	r21, r1
     7f8:	08 f4       	brcc	.+2      	; 0x7fc <detectParking+0x36>
     7fa:	68 c0       	rjmp	.+208    	; 0x8cc <detectParking+0x106>
     7fc:	45 30       	cpi	r20, 0x05	; 5
     7fe:	51 05       	cpc	r21, r1
     800:	09 f0       	breq	.+2      	; 0x804 <detectParking+0x3e>
     802:	c6 c0       	rjmp	.+396    	; 0x990 <detectParking+0x1ca>
     804:	b3 c0       	rjmp	.+358    	; 0x96c <detectParking+0x1a6>
	//fprintf(stdout,"startWidth: %d \n\n\r", startWidth);

	switch(detect.state)
	{
	case 0: //startup mode
			if (startupCounter < 4)
     806:	80 91 0a 02 	lds	r24, 0x020A
     80a:	90 91 0b 02 	lds	r25, 0x020B
     80e:	84 30       	cpi	r24, 0x04	; 4
     810:	91 05       	cpc	r25, r1
     812:	50 f4       	brcc	.+20     	; 0x828 <detectParking+0x62>
				{
				startupCounter = startupCounter + 1;
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	90 93 0b 02 	sts	0x020B, r25
     81a:	80 93 0a 02 	sts	0x020A, r24
				detect.nextState = 0;
     81e:	10 92 03 02 	sts	0x0203, r1
     822:	10 92 02 02 	sts	0x0202, r1
     826:	b4 c0       	rjmp	.+360    	; 0x990 <detectParking+0x1ca>
				}
			else
				{
				startupCounter = 0;
     828:	10 92 0b 02 	sts	0x020B, r1
     82c:	10 92 0a 02 	sts	0x020A, r1
     830:	a9 c0       	rjmp	.+338    	; 0x984 <detectParking+0x1be>
				detect.nextState = 1;
				} 	
			break;
	case 1: //normal mode
			if (abs(sDistance - rsDist) < 7) 
     832:	20 91 06 02 	lds	r18, 0x0206
     836:	30 91 07 02 	lds	r19, 0x0207
     83a:	80 91 6e 01 	lds	r24, 0x016E
     83e:	90 91 6f 01 	lds	r25, 0x016F
     842:	28 1b       	sub	r18, r24
     844:	39 0b       	sbc	r19, r25
     846:	6f ef       	ldi	r22, 0xFF	; 255
     848:	2a 3f       	cpi	r18, 0xFA	; 250
     84a:	36 07       	cpc	r19, r22
     84c:	44 f0       	brlt	.+16     	; 0x85e <detectParking+0x98>
     84e:	27 30       	cpi	r18, 0x07	; 7
     850:	31 05       	cpc	r19, r1
     852:	2c f4       	brge	.+10     	; 0x85e <detectParking+0x98>
				{
				detect.nextState = 1;
     854:	50 93 03 02 	sts	0x0203, r21
     858:	40 93 02 02 	sts	0x0202, r20
     85c:	1a c0       	rjmp	.+52     	; 0x892 <detectParking+0xcc>
				detect.controlBits = 0;
				}
			else
				{
				detect.nextState = 2;
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	13 c0       	rjmp	.+38     	; 0x88a <detectParking+0xc4>
				detect.controlBits = 0;
				}
			break;
	case 2: //possible start of parking lot
			if (abs(sDistance - rrsDist) < 7)
     864:	40 91 06 02 	lds	r20, 0x0206
     868:	50 91 07 02 	lds	r21, 0x0207
     86c:	20 91 70 01 	lds	r18, 0x0170
     870:	30 91 71 01 	lds	r19, 0x0171
     874:	ca 01       	movw	r24, r20
     876:	82 1b       	sub	r24, r18
     878:	93 0b       	sbc	r25, r19
     87a:	6f ef       	ldi	r22, 0xFF	; 255
     87c:	8a 3f       	cpi	r24, 0xFA	; 250
     87e:	96 07       	cpc	r25, r22
     880:	6c f0       	brlt	.+26     	; 0x89c <detectParking+0xd6>
     882:	07 97       	sbiw	r24, 0x07	; 7
     884:	5c f4       	brge	.+22     	; 0x89c <detectParking+0xd6>
				{
				detect.nextState = 1;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	90 93 03 02 	sts	0x0203, r25
     88e:	80 93 02 02 	sts	0x0202, r24
				detect.controlBits = 0;
     892:	10 92 05 02 	sts	0x0205, r1
     896:	10 92 04 02 	sts	0x0204, r1
     89a:	7a c0       	rjmp	.+244    	; 0x990 <detectParking+0x1ca>
				}
			else
				{
				//start of depression
				detect.nextState = 3;
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	90 93 03 02 	sts	0x0203, r25
     8a4:	80 93 02 02 	sts	0x0202, r24
				detect.controlBits = detect.controlBits + 1;
     8a8:	80 91 04 02 	lds	r24, 0x0204
     8ac:	90 91 05 02 	lds	r25, 0x0205
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	90 93 05 02 	sts	0x0205, r25
     8b6:	80 93 04 02 	sts	0x0204, r24
				rstartWidth = rrsDist;
     8ba:	30 93 69 01 	sts	0x0169, r19
     8be:	20 93 68 01 	sts	0x0168, r18
				startWidth = sDistance;
     8c2:	50 93 65 01 	sts	0x0165, r21
     8c6:	40 93 64 01 	sts	0x0164, r20
     8ca:	62 c0       	rjmp	.+196    	; 0x990 <detectParking+0x1ca>
				}
			break;
	case 3: //start of parking lot, start storing distance, set corresponding flag to 1
			if (abs(startWidth - sDistance) > 7)
     8cc:	20 91 06 02 	lds	r18, 0x0206
     8d0:	30 91 07 02 	lds	r19, 0x0207
     8d4:	80 91 64 01 	lds	r24, 0x0164
     8d8:	90 91 65 01 	lds	r25, 0x0165
     8dc:	82 1b       	sub	r24, r18
     8de:	93 0b       	sbc	r25, r19
     8e0:	97 ff       	sbrs	r25, 7
     8e2:	03 c0       	rjmp	.+6      	; 0x8ea <detectParking+0x124>
     8e4:	90 95       	com	r25
     8e6:	81 95       	neg	r24
     8e8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ea:	08 97       	sbiw	r24, 0x08	; 8
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <detectParking+0x12e>
				{
				detect.nextState = 4;
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	4a c0       	rjmp	.+148    	; 0x988 <detectParking+0x1c2>
				}
			else
				{
				detect.nextState = 3;
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	90 93 03 02 	sts	0x0203, r25
     8fc:	80 93 02 02 	sts	0x0202, r24
				rendWidth = sDistance;
     900:	30 93 6b 01 	sts	0x016B, r19
     904:	20 93 6a 01 	sts	0x016A, r18
				detect.controlBits = detect.controlBits + 1;
     908:	80 91 04 02 	lds	r24, 0x0204
     90c:	90 91 05 02 	lds	r25, 0x0205
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	27 c0       	rjmp	.+78     	; 0x962 <detectParking+0x19c>
				}
			break;
	case 4: //possible end of parking lot
			if (abs(startWidth - sDistance) > 7)
     914:	20 91 06 02 	lds	r18, 0x0206
     918:	30 91 07 02 	lds	r19, 0x0207
     91c:	80 91 64 01 	lds	r24, 0x0164
     920:	90 91 65 01 	lds	r25, 0x0165
     924:	82 1b       	sub	r24, r18
     926:	93 0b       	sbc	r25, r19
     928:	97 ff       	sbrs	r25, 7
     92a:	03 c0       	rjmp	.+6      	; 0x932 <detectParking+0x16c>
     92c:	90 95       	com	r25
     92e:	81 95       	neg	r24
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	08 97       	sbiw	r24, 0x08	; 8
     934:	5c f0       	brlt	.+22     	; 0x94c <detectParking+0x186>
				{
				detect.nextState = 5;
     936:	85 e0       	ldi	r24, 0x05	; 5
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	90 93 03 02 	sts	0x0203, r25
     93e:	80 93 02 02 	sts	0x0202, r24
				endWidth = sDistance;
     942:	30 93 67 01 	sts	0x0167, r19
     946:	20 93 66 01 	sts	0x0166, r18
     94a:	22 c0       	rjmp	.+68     	; 0x990 <detectParking+0x1ca>
				//fprintf(stdout,"endWidth: %d \n\r", endWidth) ;
				}
			else
				{
				detect.nextState = 3;
     94c:	83 e0       	ldi	r24, 0x03	; 3
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	90 93 03 02 	sts	0x0203, r25
     954:	80 93 02 02 	sts	0x0202, r24
				detect.controlBits = detect.controlBits + 2;
     958:	80 91 04 02 	lds	r24, 0x0204
     95c:	90 91 05 02 	lds	r25, 0x0205
     960:	02 96       	adiw	r24, 0x02	; 2
     962:	90 93 05 02 	sts	0x0205, r25
     966:	80 93 04 02 	sts	0x0204, r24
     96a:	12 c0       	rjmp	.+36     	; 0x990 <detectParking+0x1ca>
				}
			break;
	case 5: //end of parking lot measurment, determine if really a lot
			if (detect.controlBits > 4)
     96c:	80 91 04 02 	lds	r24, 0x0204
     970:	90 91 05 02 	lds	r25, 0x0205
     974:	05 97       	sbiw	r24, 0x05	; 5
     976:	20 f0       	brcs	.+8      	; 0x980 <detectParking+0x1ba>
				{
				isLot = 1;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 5e 01 	sts	0x015E, r24
     97e:	02 c0       	rjmp	.+4      	; 0x984 <detectParking+0x1be>
				detect.nextState = 1;
				}
			else
				{
				isLot = 0;
     980:	10 92 5e 01 	sts	0x015E, r1
				detect.nextState = 1;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	90 93 03 02 	sts	0x0203, r25
     98c:	80 93 02 02 	sts	0x0202, r24
				} 
			break;
	}
	detect.state = detect.nextState;
     990:	80 91 02 02 	lds	r24, 0x0202
     994:	90 91 03 02 	lds	r25, 0x0203
     998:	90 93 01 02 	sts	0x0201, r25
     99c:	80 93 00 02 	sts	0x0200, r24
}
     9a0:	08 95       	ret

000009a2 <findParkingParameters>:

//********************************************************** 
//findParkingParameters
//**********************************************************
void findParkingParameters(void)
{
     9a2:	60 91 66 01 	lds	r22, 0x0166
     9a6:	70 91 67 01 	lds	r23, 0x0167
     9aa:	80 91 6a 01 	lds	r24, 0x016A
     9ae:	90 91 6b 01 	lds	r25, 0x016B
     9b2:	86 1b       	sub	r24, r22
     9b4:	97 0b       	sbc	r25, r23
     9b6:	90 93 fb 01 	sts	0x01FB, r25
     9ba:	80 93 fa 01 	sts	0x01FA, r24
	parkingLotWidth = rendWidth - endWidth;
	if ((endWidth > 20) && (endWidth < 30))
     9be:	cb 01       	movw	r24, r22
     9c0:	45 97       	sbiw	r24, 0x15	; 21
     9c2:	09 97       	sbiw	r24, 0x09	; 9
     9c4:	68 f4       	brcc	.+26     	; 0x9e0 <findParkingParameters+0x3e>
		angularLotWidth = 22;
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	a0 eb       	ldi	r26, 0xB0	; 176
     9cc:	b1 e4       	ldi	r27, 0x41	; 65
     9ce:	80 93 72 01 	sts	0x0172, r24
     9d2:	90 93 73 01 	sts	0x0173, r25
     9d6:	a0 93 74 01 	sts	0x0174, r26
     9da:	b0 93 75 01 	sts	0x0175, r27
     9de:	08 95       	ret
	else
		angularLotWidth = 21 + (abs(endWidth - 10) * 0.3);
     9e0:	9b 01       	movw	r18, r22
     9e2:	2a 50       	subi	r18, 0x0A	; 10
     9e4:	30 40       	sbci	r19, 0x00	; 0
     9e6:	37 ff       	sbrs	r19, 7
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <findParkingParameters+0x4e>
     9ea:	30 95       	com	r19
     9ec:	21 95       	neg	r18
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	b9 01       	movw	r22, r18
     9f2:	88 27       	eor	r24, r24
     9f4:	77 fd       	sbrc	r23, 7
     9f6:	80 95       	com	r24
     9f8:	98 2f       	mov	r25, r24
     9fa:	0e 94 9e 0b 	call	0x173c	; 0x173c <__floatsisf>
     9fe:	2a e9       	ldi	r18, 0x9A	; 154
     a00:	39 e9       	ldi	r19, 0x99	; 153
     a02:	49 e9       	ldi	r20, 0x99	; 153
     a04:	5e e3       	ldi	r21, 0x3E	; 62
     a06:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	48 ea       	ldi	r20, 0xA8	; 168
     a10:	51 e4       	ldi	r21, 0x41	; 65
     a12:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3>
     a16:	60 93 72 01 	sts	0x0172, r22
     a1a:	70 93 73 01 	sts	0x0173, r23
     a1e:	80 93 74 01 	sts	0x0174, r24
     a22:	90 93 75 01 	sts	0x0175, r25
     a26:	08 95       	ret

00000a28 <parkCar>:
//********************************************************** 
//parkCar
//********************************************************** 

void parkCar (void)
{
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
	// not aligned while doing the reverse right, move forward again and restart
	if ((park.state <= 3) && ((sDistance - rrsDist) > 5) && (rrsDist < sDistance))
     a2c:	80 91 cb 01 	lds	r24, 0x01CB
     a30:	90 91 cc 01 	lds	r25, 0x01CC
     a34:	04 97       	sbiw	r24, 0x04	; 4
     a36:	c0 f4       	brcc	.+48     	; 0xa68 <parkCar+0x40>
     a38:	40 91 06 02 	lds	r20, 0x0206
     a3c:	50 91 07 02 	lds	r21, 0x0207
     a40:	20 91 70 01 	lds	r18, 0x0170
     a44:	30 91 71 01 	lds	r19, 0x0171
     a48:	ca 01       	movw	r24, r20
     a4a:	82 1b       	sub	r24, r18
     a4c:	93 0b       	sbc	r25, r19
     a4e:	06 97       	sbiw	r24, 0x06	; 6
     a50:	58 f0       	brcs	.+22     	; 0xa68 <parkCar+0x40>
     a52:	24 17       	cp	r18, r20
     a54:	35 07       	cpc	r19, r21
     a56:	40 f4       	brcc	.+16     	; 0xa68 <parkCar+0x40>
		{
		park.state = 0;
     a58:	10 92 cc 01 	sts	0x01CC, r1
     a5c:	10 92 cb 01 	sts	0x01CB, r1
		delayCounter = 0;
     a60:	10 92 ed 01 	sts	0x01ED, r1
     a64:	10 92 ec 01 	sts	0x01EC, r1
		}


    // PARKING STATE MACHINE
	switch (park.state)
     a68:	c0 91 cb 01 	lds	r28, 0x01CB
     a6c:	d0 91 cc 01 	lds	r29, 0x01CC
     a70:	c3 30       	cpi	r28, 0x03	; 3
     a72:	d1 05       	cpc	r29, r1
     a74:	09 f4       	brne	.+2      	; 0xa78 <parkCar+0x50>
     a76:	a8 c0       	rjmp	.+336    	; 0xbc8 <parkCar+0x1a0>
     a78:	c4 30       	cpi	r28, 0x04	; 4
     a7a:	d1 05       	cpc	r29, r1
     a7c:	40 f4       	brcc	.+16     	; 0xa8e <parkCar+0x66>
     a7e:	c1 30       	cpi	r28, 0x01	; 1
     a80:	d1 05       	cpc	r29, r1
     a82:	09 f4       	brne	.+2      	; 0xa86 <parkCar+0x5e>
     a84:	5b c0       	rjmp	.+182    	; 0xb3c <parkCar+0x114>
     a86:	22 97       	sbiw	r28, 0x02	; 2
     a88:	08 f0       	brcs	.+2      	; 0xa8c <parkCar+0x64>
     a8a:	65 c0       	rjmp	.+202    	; 0xb56 <parkCar+0x12e>
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <parkCar+0x80>
     a8e:	c5 30       	cpi	r28, 0x05	; 5
     a90:	d1 05       	cpc	r29, r1
     a92:	09 f4       	brne	.+2      	; 0xa96 <parkCar+0x6e>
     a94:	f6 c0       	rjmp	.+492    	; 0xc82 <parkCar+0x25a>
     a96:	c5 30       	cpi	r28, 0x05	; 5
     a98:	d1 05       	cpc	r29, r1
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <parkCar+0x76>
     a9c:	c5 c0       	rjmp	.+394    	; 0xc28 <parkCar+0x200>
     a9e:	c6 30       	cpi	r28, 0x06	; 6
     aa0:	d1 05       	cpc	r29, r1
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <parkCar+0x7e>
     aa4:	36 c1       	rjmp	.+620    	; 0xd12 <parkCar+0x2ea>
     aa6:	20 c1       	rjmp	.+576    	; 0xce8 <parkCar+0x2c0>
	{
	case 0: //move the car forward to give it enough space to reverse
			isParked = 0;
     aa8:	10 92 61 01 	sts	0x0161, r1
			
			//Calculating the emount to go forward by
			if (isEntered == 0)
     aac:	80 91 5f 01 	lds	r24, 0x015F
     ab0:	88 23       	and	r24, r24
     ab2:	19 f4       	brne	.+6      	; 0xaba <parkCar+0x92>
					additionFactor = 4;
     ab4:	84 e0       	ldi	r24, 0x04	; 4
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <parkCar+0x96>
			else
					additionFactor = 10;
     aba:	8a e0       	ldi	r24, 0x0A	; 10
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	90 93 63 01 	sts	0x0163, r25
     ac2:	80 93 62 01 	sts	0x0162, r24

			//Go forward to provide enough turning radius			
			if (delayCounter < additionFactor)
     ac6:	20 91 ec 01 	lds	r18, 0x01EC
     aca:	30 91 ed 01 	lds	r19, 0x01ED
     ace:	80 91 62 01 	lds	r24, 0x0162
     ad2:	90 91 63 01 	lds	r25, 0x0163
     ad6:	28 17       	cp	r18, r24
     ad8:	39 07       	cpc	r19, r25
     ada:	c0 f4       	brcc	.+48     	; 0xb0c <parkCar+0xe4>
				{
				setMovement(1,0,0,0);
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				delayCounter = delayCounter + 1;
     af0:	80 91 ec 01 	lds	r24, 0x01EC
     af4:	90 91 ed 01 	lds	r25, 0x01ED
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	90 93 ed 01 	sts	0x01ED, r25
     afe:	80 93 ec 01 	sts	0x01EC, r24
				park.nextState = 0;
     b02:	10 92 ce 01 	sts	0x01CE, r1
     b06:	10 92 cd 01 	sts	0x01CD, r1
     b0a:	03 c1       	rjmp	.+518    	; 0xd12 <parkCar+0x2ea>
				}
			else
				{
				setMovement(0,0,0,0);
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				delayCounter = 0;
     b20:	10 92 ed 01 	sts	0x01ED, r1
     b24:	10 92 ec 01 	sts	0x01EC, r1
				park.nextState = 1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	90 93 ce 01 	sts	0x01CE, r25
     b30:	80 93 cd 01 	sts	0x01CD, r24
				isEntered = 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 5f 01 	sts	0x015F, r24
     b3a:	eb c0       	rjmp	.+470    	; 0xd12 <parkCar+0x2ea>
				}
			break;

	case 1:	//turn wheel right and HALT!!!
			setMovement (0, 0, 0, 1);
     b3c:	21 e0       	ldi	r18, 0x01	; 1
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
			park.nextState = 2;
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	91 c0       	rjmp	.+290    	; 0xc78 <parkCar+0x250>
			delayCounter = 0;
			break;	
		
			// continue till you reach back the edge of the Lot
	case 2:	if (delayCounter < ((endWidth-10)*2))
     b56:	80 91 66 01 	lds	r24, 0x0166
     b5a:	90 91 67 01 	lds	r25, 0x0167
     b5e:	0a 97       	sbiw	r24, 0x0a	; 10
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	20 91 ec 01 	lds	r18, 0x01EC
     b68:	30 91 ed 01 	lds	r19, 0x01ED
     b6c:	28 17       	cp	r18, r24
     b6e:	39 07       	cpc	r19, r25
     b70:	d0 f4       	brcc	.+52     	; 0xba6 <parkCar+0x17e>
				{
				park.nextState = 2;
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	90 93 ce 01 	sts	0x01CE, r25
     b7a:	80 93 cd 01 	sts	0x01CD, r24
				setMovement (0, 1, 0, 1);
     b7e:	21 e0       	ldi	r18, 0x01	; 1
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				delayCounter = delayCounter + 1;
     b92:	80 91 ec 01 	lds	r24, 0x01EC
     b96:	90 91 ed 01 	lds	r25, 0x01ED
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	90 93 ed 01 	sts	0x01ED, r25
     ba0:	80 93 ec 01 	sts	0x01EC, r24
     ba4:	b6 c0       	rjmp	.+364    	; 0xd12 <parkCar+0x2ea>
				}
			else
				{
				park.nextState = 3;
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	90 93 ce 01 	sts	0x01CE, r25
     bae:	80 93 cd 01 	sts	0x01CD, r24
				setMovement (0, 0, 0, 1);
     bb2:	21 e0       	ldi	r18, 0x01	; 1
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
     bc6:	a1 c0       	rjmp	.+322    	; 0xd0a <parkCar+0x2e2>
				delayCounter  = 0;	
				}
			break;

	case 3: //reverse right inside the Lot
			if ((sDistance > angularLotWidth) || (rDistance < 15)) 
     bc8:	60 91 06 02 	lds	r22, 0x0206
     bcc:	70 91 07 02 	lds	r23, 0x0207
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__floatunsisf>
     bd8:	20 91 72 01 	lds	r18, 0x0172
     bdc:	30 91 73 01 	lds	r19, 0x0173
     be0:	40 91 74 01 	lds	r20, 0x0174
     be4:	50 91 75 01 	lds	r21, 0x0175
     be8:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__gesf2>
     bec:	18 16       	cp	r1, r24
     bee:	34 f0       	brlt	.+12     	; 0xbfc <parkCar+0x1d4>
     bf0:	80 91 c9 01 	lds	r24, 0x01C9
     bf4:	90 91 ca 01 	lds	r25, 0x01CA
     bf8:	0f 97       	sbiw	r24, 0x0f	; 15
     bfa:	68 f4       	brcc	.+26     	; 0xc16 <parkCar+0x1ee>
			{
				setMovement (0, 0, 0, 0);	//pause
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				park.nextState = 4;			//start the reverse left maneuver	
     c10:	84 e0       	ldi	r24, 0x04	; 4
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	31 c0       	rjmp	.+98     	; 0xc78 <parkCar+0x250>
				delayCounter = 0;			//reset delayCounter
			}
			else  //reverse right till break point
			{
				setMovement (0, 1, 0, 1);			//reverse right
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	3b c0       	rjmp	.+118    	; 0xc9e <parkCar+0x276>
				park.nextState = 3;					//continue reverse right
			}
			break;

	case 4: //reverse left for 4 cycles or until rDistance lesser than 6cm 
			if ((rDistance > 6))
     c28:	80 91 c9 01 	lds	r24, 0x01C9
     c2c:	90 91 ca 01 	lds	r25, 0x01CA
     c30:	07 97       	sbiw	r24, 0x07	; 7
     c32:	b0 f0       	brcs	.+44     	; 0xc60 <parkCar+0x238>
			{
				setMovement (0, 1, 1, 0);			//reverse left
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	41 e0       	ldi	r20, 0x01	; 1
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				delayCounter = delayCounter + 1;	//update counter
     c48:	80 91 ec 01 	lds	r24, 0x01EC
     c4c:	90 91 ed 01 	lds	r25, 0x01ED
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	90 93 ed 01 	sts	0x01ED, r25
     c56:	80 93 ec 01 	sts	0x01EC, r24
				park.nextState = 4;					//continue reverse left
     c5a:	84 e0       	ldi	r24, 0x04	; 4
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	3f c0       	rjmp	.+126    	; 0xcde <parkCar+0x2b6>
			}
			else  //stop and move to next state
			{
				setMovement (1, 0, 0, 0);			//pause
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				park.nextState = 5;					//start forward maneuver
     c74:	85 e0       	ldi	r24, 0x05	; 5
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	90 93 ce 01 	sts	0x01CE, r25
     c7c:	80 93 cd 01 	sts	0x01CD, r24
     c80:	44 c0       	rjmp	.+136    	; 0xd0a <parkCar+0x2e2>
				delayCounter = 0;					//reset delay counter
			}
			break;

	case 5: //forward right for 6 cycles or until fDistance lesser than 10cm
			if ((fDistance > 10))
     c82:	80 91 fe 01 	lds	r24, 0x01FE
     c86:	90 91 ff 01 	lds	r25, 0x01FF
     c8a:	0b 97       	sbiw	r24, 0x0b	; 11
     c8c:	c0 f0       	brcs	.+48     	; 0xcbe <parkCar+0x296>
			{
				setMovement (1, 0, 0, 1);
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				delayCounter = delayCounter + 1;
     ca2:	80 91 ec 01 	lds	r24, 0x01EC
     ca6:	90 91 ed 01 	lds	r25, 0x01ED
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	90 93 ed 01 	sts	0x01ED, r25
     cb0:	80 93 ec 01 	sts	0x01EC, r24
				park.nextState = 5;
     cb4:	d0 93 ce 01 	sts	0x01CE, r29
     cb8:	c0 93 cd 01 	sts	0x01CD, r28
     cbc:	2a c0       	rjmp	.+84     	; 0xd12 <parkCar+0x2ea>
			}
			else
			{
				setMovement (0, 0, 0, 0);
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				delayCounter = 0;
     cd2:	10 92 ed 01 	sts	0x01ED, r1
     cd6:	10 92 ec 01 	sts	0x01EC, r1
				park.nextState = 6;
     cda:	86 e0       	ldi	r24, 0x06	; 6
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	90 93 ce 01 	sts	0x01CE, r25
     ce2:	80 93 cd 01 	sts	0x01CD, r24
     ce6:	15 c0       	rjmp	.+42     	; 0xd12 <parkCar+0x2ea>
			}
			break;

	case 6: //Parking is complete!!!
				setMovement (0, 0, 0, 0);
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				park.nextState = 6;
     cfc:	d0 93 ce 01 	sts	0x01CE, r29
     d00:	c0 93 cd 01 	sts	0x01CD, r28
				isParked = 1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 61 01 	sts	0x0161, r24
				delayCounter = 0;
     d0a:	10 92 ed 01 	sts	0x01ED, r1
     d0e:	10 92 ec 01 	sts	0x01EC, r1
				break;
	}
	park.state = park.nextState;
     d12:	80 91 cd 01 	lds	r24, 0x01CD
     d16:	90 91 ce 01 	lds	r25, 0x01CE
     d1a:	90 93 cc 01 	sts	0x01CC, r25
     d1e:	80 93 cb 01 	sts	0x01CB, r24

} 
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <testCar>:

//********************************************************** 
//testCar
//********************************************************** 
void testCar(void)
{
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
	setMovement (1,0,1,0);
}
     d3c:	08 95       	ret

00000d3e <moveCar>:
//********************************************************** 
//moveCar
//********************************************************** 

void moveCar (void)
{
     d3e:	80 91 c9 01 	lds	r24, 0x01C9
     d42:	90 91 ca 01 	lds	r25, 0x01CA
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	84 e4       	ldi	r24, 0x44	; 68
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	9f 93       	push	r25
     d50:	8f 93       	push	r24
     d52:	80 91 0e 02 	lds	r24, 0x020E
     d56:	90 91 0f 02 	lds	r25, 0x020F
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <fprintf>
	//fprintf(stdout,"sDistance: %d \n\r", sDistance);
	fprintf(stdout,"rDistance: %d \n\r", rDistance);
	//fprintf(stdout,"move.state: %d \n\r", move.state);
	switch (move.state)
     d62:	8d b7       	in	r24, 0x3d	; 61
     d64:	9e b7       	in	r25, 0x3e	; 62
     d66:	06 96       	adiw	r24, 0x06	; 6
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	9e bf       	out	0x3e, r25	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	8d bf       	out	0x3d, r24	; 61
     d72:	20 91 de 01 	lds	r18, 0x01DE
     d76:	30 91 df 01 	lds	r19, 0x01DF
     d7a:	21 30       	cpi	r18, 0x01	; 1
     d7c:	31 05       	cpc	r19, r1
     d7e:	89 f0       	breq	.+34     	; 0xda2 <moveCar+0x64>
     d80:	21 30       	cpi	r18, 0x01	; 1
     d82:	31 05       	cpc	r19, r1
     d84:	48 f0       	brcs	.+18     	; 0xd98 <moveCar+0x5a>
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	09 f4       	brne	.+2      	; 0xd8e <moveCar+0x50>
     d8c:	8e c0       	rjmp	.+284    	; 0xeaa <moveCar+0x16c>
     d8e:	23 30       	cpi	r18, 0x03	; 3
     d90:	31 05       	cpc	r19, r1
     d92:	09 f0       	breq	.+2      	; 0xd96 <moveCar+0x58>
     d94:	a8 c0       	rjmp	.+336    	; 0xee6 <moveCar+0x1a8>
     d96:	9f c0       	rjmp	.+318    	; 0xed6 <moveCar+0x198>
	{
	case 0: // rest
			isEntered = 0;
     d98:	10 92 5f 01 	sts	0x015F, r1
			move.nextState = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	95 c0       	rjmp	.+298    	; 0xecc <moveCar+0x18e>
			move.controlBits = 0;
			break;
	case 1:	// go forward till you detect a parking spot
			if ((isParkingLot)&&(!isParked))
     da2:	80 91 e8 01 	lds	r24, 0x01E8
     da6:	88 23       	and	r24, r24
     da8:	09 f4       	brne	.+2      	; 0xdac <moveCar+0x6e>
     daa:	5e c0       	rjmp	.+188    	; 0xe68 <moveCar+0x12a>
     dac:	80 91 61 01 	lds	r24, 0x0161
     db0:	88 23       	and	r24, r24
     db2:	09 f0       	breq	.+2      	; 0xdb6 <moveCar+0x78>
     db4:	59 c0       	rjmp	.+178    	; 0xe68 <moveCar+0x12a>
				{
				move.nextState = 2;		  //if parking spot found, goto state 2
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	90 93 e1 01 	sts	0x01E1, r25
     dbe:	80 93 e0 01 	sts	0x01E0, r24
				setMovement(0,1,0,0);
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				move.controlBits = 0;
     dd6:	10 92 e3 01 	sts	0x01E3, r1
     dda:	10 92 e2 01 	sts	0x01E2, r1
//********************************************************** 
//findParkingParameters
//**********************************************************
void findParkingParameters(void)
{
	parkingLotWidth = rendWidth - endWidth;
     dde:	60 91 66 01 	lds	r22, 0x0166
     de2:	70 91 67 01 	lds	r23, 0x0167
     de6:	80 91 6a 01 	lds	r24, 0x016A
     dea:	90 91 6b 01 	lds	r25, 0x016B
     dee:	86 1b       	sub	r24, r22
     df0:	97 0b       	sbc	r25, r23
     df2:	90 93 fb 01 	sts	0x01FB, r25
     df6:	80 93 fa 01 	sts	0x01FA, r24
	if ((endWidth > 20) && (endWidth < 30))
     dfa:	cb 01       	movw	r24, r22
     dfc:	45 97       	sbiw	r24, 0x15	; 21
     dfe:	09 97       	sbiw	r24, 0x09	; 9
     e00:	68 f4       	brcc	.+26     	; 0xe1c <moveCar+0xde>
		angularLotWidth = 22;
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a0 eb       	ldi	r26, 0xB0	; 176
     e08:	b1 e4       	ldi	r27, 0x41	; 65
     e0a:	80 93 72 01 	sts	0x0172, r24
     e0e:	90 93 73 01 	sts	0x0173, r25
     e12:	a0 93 74 01 	sts	0x0174, r26
     e16:	b0 93 75 01 	sts	0x0175, r27
     e1a:	23 c0       	rjmp	.+70     	; 0xe62 <moveCar+0x124>
	else
		angularLotWidth = 21 + (abs(endWidth - 10) * 0.3);
     e1c:	9b 01       	movw	r18, r22
     e1e:	2a 50       	subi	r18, 0x0A	; 10
     e20:	30 40       	sbci	r19, 0x00	; 0
     e22:	37 ff       	sbrs	r19, 7
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <moveCar+0xee>
     e26:	30 95       	com	r19
     e28:	21 95       	neg	r18
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	b9 01       	movw	r22, r18
     e2e:	88 27       	eor	r24, r24
     e30:	77 fd       	sbrc	r23, 7
     e32:	80 95       	com	r24
     e34:	98 2f       	mov	r25, r24
     e36:	0e 94 9e 0b 	call	0x173c	; 0x173c <__floatsisf>
     e3a:	2a e9       	ldi	r18, 0x9A	; 154
     e3c:	39 e9       	ldi	r19, 0x99	; 153
     e3e:	49 e9       	ldi	r20, 0x99	; 153
     e40:	5e e3       	ldi	r21, 0x3E	; 62
     e42:	0e 94 2e 0c 	call	0x185c	; 0x185c <__mulsf3>
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	48 ea       	ldi	r20, 0xA8	; 168
     e4c:	51 e4       	ldi	r21, 0x41	; 65
     e4e:	0e 94 38 0b 	call	0x1670	; 0x1670 <__addsf3>
     e52:	60 93 72 01 	sts	0x0172, r22
     e56:	70 93 73 01 	sts	0x0173, r23
     e5a:	80 93 74 01 	sts	0x0174, r24
     e5e:	90 93 75 01 	sts	0x0175, r25
				move.nextState = 2;		  //if parking spot found, goto state 2
				setMovement(0,1,0,0);
				move.controlBits = 0;
			    //increase speed of car slightly since reverse is weaker
				findParkingParameters();  // find the angularLotWidth
				OCR1A = 36000;
     e62:	80 ea       	ldi	r24, 0xA0	; 160
     e64:	9c e8       	ldi	r25, 0x8C	; 140
     e66:	1c c0       	rjmp	.+56     	; 0xea0 <moveCar+0x162>
				}
			else
				{
				move.nextState = 1;		  //else keep going forward
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	90 93 e1 01 	sts	0x01E1, r25
     e70:	80 93 e0 01 	sts	0x01E0, r24
				move.controlBits = 0;
     e74:	10 92 e3 01 	sts	0x01E3, r1
     e78:	10 92 e2 01 	sts	0x01E2, r1
				detectParking ();         //keep running detectParking till a parking space is found
     e7c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <detectParking>
				isParkingLot = isLot;     //isLot is set in detectParking()
     e80:	80 91 5e 01 	lds	r24, 0x015E
     e84:	80 93 e8 01 	sts	0x01E8, r24
				setMovement(1,0,0,0);     
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 b5 02 	call	0x56a	; 0x56a <setMovement>
				OCR1A = 42000;
     e9c:	80 e1       	ldi	r24, 0x10	; 16
     e9e:	94 ea       	ldi	r25, 0xA4	; 164
     ea0:	90 93 89 00 	sts	0x0089, r25
     ea4:	80 93 88 00 	sts	0x0088, r24
     ea8:	1e c0       	rjmp	.+60     	; 0xee6 <moveCar+0x1a8>
				}
			break;
	case 2: //park the car
			if (!isParked)
     eaa:	80 91 61 01 	lds	r24, 0x0161
     eae:	88 23       	and	r24, r24
     eb0:	59 f4       	brne	.+22     	; 0xec8 <moveCar+0x18a>
				{
				move.nextState = 2;
     eb2:	30 93 e1 01 	sts	0x01E1, r19
     eb6:	20 93 e0 01 	sts	0x01E0, r18
				move.controlBits = 0;
     eba:	10 92 e3 01 	sts	0x01E3, r1
     ebe:	10 92 e2 01 	sts	0x01E2, r1
				parkCar();
     ec2:	0e 94 14 05 	call	0xa28	; 0xa28 <parkCar>
     ec6:	0f c0       	rjmp	.+30     	; 0xee6 <moveCar+0x1a8>
				}
			else
				{
				move.nextState = 3;
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	90 93 e1 01 	sts	0x01E1, r25
     ed0:	80 93 e0 01 	sts	0x01E0, r24
     ed4:	04 c0       	rjmp	.+8      	; 0xede <moveCar+0x1a0>
				move.controlBits = 0;
				}
			break;
	case 3: //back to rest
			move.nextState = 3;
     ed6:	30 93 e1 01 	sts	0x01E1, r19
     eda:	20 93 e0 01 	sts	0x01E0, r18
			move.controlBits = 0;
     ede:	10 92 e3 01 	sts	0x01E3, r1
     ee2:	10 92 e2 01 	sts	0x01E2, r1
			break;
	}
	move.state = move.nextState;
     ee6:	80 91 e0 01 	lds	r24, 0x01E0
     eea:	90 91 e1 01 	lds	r25, 0x01E1
     eee:	90 93 df 01 	sts	0x01DF, r25
     ef2:	80 93 de 01 	sts	0x01DE, r24
	rrsDist = rsDist;
     ef6:	80 91 6e 01 	lds	r24, 0x016E
     efa:	90 91 6f 01 	lds	r25, 0x016F
     efe:	90 93 71 01 	sts	0x0171, r25
     f02:	80 93 70 01 	sts	0x0170, r24
	rsDist = sDistance;
     f06:	80 91 06 02 	lds	r24, 0x0206
     f0a:	90 91 07 02 	lds	r25, 0x0207
     f0e:	90 93 6f 01 	sts	0x016F, r25
     f12:	80 93 6e 01 	sts	0x016E, r24
}
     f16:	08 95       	ret

00000f18 <uart_init>:
/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
void
uart_init(void)
{
     f18:	87 e6       	ldi	r24, 0x67	; 103
     f1a:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     f1e:	88 e1       	ldi	r24, 0x18	; 24
     f20:	80 93 c1 00 	sts	0x00C1, r24
}
     f24:	08 95       	ret

00000f26 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     f26:	1f 93       	push	r17
     f28:	18 2f       	mov	r17, r24

  if (c == '\a')
     f2a:	87 30       	cpi	r24, 0x07	; 7
     f2c:	49 f4       	brne	.+18     	; 0xf40 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     f2e:	60 91 10 02 	lds	r22, 0x0210
     f32:	70 91 11 02 	lds	r23, 0x0211
     f36:	85 e5       	ldi	r24, 0x55	; 85
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 8f 08 	call	0x111e	; 0x111e <fputs>
     f3e:	0b c0       	rjmp	.+22     	; 0xf56 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     f40:	8a 30       	cpi	r24, 0x0A	; 10
     f42:	19 f4       	brne	.+6      	; 0xf4a <uart_putchar+0x24>
    uart_putchar('\r', stream);
     f44:	8d e0       	ldi	r24, 0x0D	; 13
     f46:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     f4a:	80 91 c0 00 	lds	r24, 0x00C0
     f4e:	85 ff       	sbrs	r24, 5
     f50:	fc cf       	rjmp	.-8      	; 0xf4a <uart_putchar+0x24>
  UDR0 = c;
     f52:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	1f 91       	pop	r17
     f5c:	08 95       	ret

00000f5e <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     f6c:	80 91 76 01 	lds	r24, 0x0176
     f70:	90 91 77 01 	lds	r25, 0x0177
     f74:	89 2b       	or	r24, r25
     f76:	09 f0       	breq	.+2      	; 0xf7a <uart_getchar+0x1c>
     f78:	a0 c0       	rjmp	.+320    	; 0x10ba <uart_getchar+0x15c>
     f7a:	08 e7       	ldi	r16, 0x78	; 120
     f7c:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     f7e:	80 91 c0 00 	lds	r24, 0x00C0
     f82:	87 ff       	sbrs	r24, 7
     f84:	fc cf       	rjmp	.-8      	; 0xf7e <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     f86:	80 91 c0 00 	lds	r24, 0x00C0
     f8a:	84 ff       	sbrs	r24, 4
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <uart_getchar+0x36>
     f8e:	2e ef       	ldi	r18, 0xFE	; 254
     f90:	3f ef       	ldi	r19, 0xFF	; 255
     f92:	a7 c0       	rjmp	.+334    	; 0x10e2 <uart_getchar+0x184>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     f94:	80 91 c0 00 	lds	r24, 0x00C0
     f98:	83 fd       	sbrc	r24, 3
     f9a:	a1 c0       	rjmp	.+322    	; 0x10de <uart_getchar+0x180>
	  return _FDEV_ERR;
	c = UDR0;
     f9c:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     fa0:	9d 30       	cpi	r25, 0x0D	; 13
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     fa4:	9a 30       	cpi	r25, 0x0A	; 10
     fa6:	69 f4       	brne	.+26     	; 0xfc2 <uart_getchar+0x64>
	  {
	    *cp = c;
     fa8:	8a e0       	ldi	r24, 0x0A	; 10
     faa:	f8 01       	movw	r30, r16
     fac:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     fae:	b7 01       	movw	r22, r14
     fb0:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
	    rxp = b;
     fb4:	88 e7       	ldi	r24, 0x78	; 120
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	90 93 77 01 	sts	0x0177, r25
     fbc:	80 93 76 01 	sts	0x0176, r24
     fc0:	7c c0       	rjmp	.+248    	; 0x10ba <uart_getchar+0x15c>
	    break;
	  }
	else if (c == '\t')
     fc2:	99 30       	cpi	r25, 0x09	; 9
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <uart_getchar+0x6a>
     fc6:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     fc8:	89 2f       	mov	r24, r25
     fca:	80 52       	subi	r24, 0x20	; 32
     fcc:	8f 35       	cpi	r24, 0x5F	; 95
     fce:	10 f0       	brcs	.+4      	; 0xfd4 <uart_getchar+0x76>
     fd0:	90 3a       	cpi	r25, 0xA0	; 160
     fd2:	78 f0       	brcs	.+30     	; 0xff2 <uart_getchar+0x94>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     fd4:	f1 e0       	ldi	r31, 0x01	; 1
     fd6:	07 3c       	cpi	r16, 0xC7	; 199
     fd8:	1f 07       	cpc	r17, r31
     fda:	19 f4       	brne	.+6      	; 0xfe2 <uart_getchar+0x84>
	      uart_putchar('\a', stream);
     fdc:	b7 01       	movw	r22, r14
     fde:	87 e0       	ldi	r24, 0x07	; 7
     fe0:	05 c0       	rjmp	.+10     	; 0xfec <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     fe2:	f8 01       	movw	r30, r16
     fe4:	91 93       	st	Z+, r25
     fe6:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     fe8:	b7 01       	movw	r22, r14
     fea:	89 2f       	mov	r24, r25
     fec:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
     ff0:	c6 cf       	rjmp	.-116    	; 0xf7e <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     ff2:	92 31       	cpi	r25, 0x12	; 18
     ff4:	39 f1       	breq	.+78     	; 0x1044 <uart_getchar+0xe6>
     ff6:	93 31       	cpi	r25, 0x13	; 19
     ff8:	38 f4       	brcc	.+14     	; 0x1008 <uart_getchar+0xaa>
     ffa:	93 30       	cpi	r25, 0x03	; 3
     ffc:	09 f4       	brne	.+2      	; 0x1000 <uart_getchar+0xa2>
     ffe:	6f c0       	rjmp	.+222    	; 0x10de <uart_getchar+0x180>
    1000:	98 30       	cpi	r25, 0x08	; 8
    1002:	09 f0       	breq	.+2      	; 0x1006 <uart_getchar+0xa8>
    1004:	bc cf       	rjmp	.-136    	; 0xf7e <uart_getchar+0x20>
    1006:	09 c0       	rjmp	.+18     	; 0x101a <uart_getchar+0xbc>
    1008:	97 31       	cpi	r25, 0x17	; 23
    100a:	09 f4       	brne	.+2      	; 0x100e <uart_getchar+0xb0>
    100c:	4b c0       	rjmp	.+150    	; 0x10a4 <uart_getchar+0x146>
    100e:	9f 37       	cpi	r25, 0x7F	; 127
    1010:	21 f0       	breq	.+8      	; 0x101a <uart_getchar+0xbc>
    1012:	95 31       	cpi	r25, 0x15	; 21
    1014:	09 f0       	breq	.+2      	; 0x1018 <uart_getchar+0xba>
    1016:	b3 cf       	rjmp	.-154    	; 0xf7e <uart_getchar+0x20>
    1018:	32 c0       	rjmp	.+100    	; 0x107e <uart_getchar+0x120>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	08 37       	cpi	r16, 0x78	; 120
    101e:	1f 07       	cpc	r17, r31
    1020:	09 f0       	breq	.+2      	; 0x1024 <uart_getchar+0xc6>
    1022:	08 f4       	brcc	.+2      	; 0x1026 <uart_getchar+0xc8>
    1024:	ac cf       	rjmp	.-168    	; 0xf7e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1026:	b7 01       	movw	r22, r14
    1028:	88 e0       	ldi	r24, 0x08	; 8
    102a:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
		uart_putchar(' ', stream);
    102e:	b7 01       	movw	r22, r14
    1030:	80 e2       	ldi	r24, 0x20	; 32
    1032:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
		uart_putchar('\b', stream);
    1036:	b7 01       	movw	r22, r14
    1038:	88 e0       	ldi	r24, 0x08	; 8
    103a:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
		cp--;
    103e:	01 50       	subi	r16, 0x01	; 1
    1040:	10 40       	sbci	r17, 0x00	; 0
    1042:	9d cf       	rjmp	.-198    	; 0xf7e <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1044:	b7 01       	movw	r22, r14
    1046:	8d e0       	ldi	r24, 0x0D	; 13
    1048:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
    104c:	c8 e7       	ldi	r28, 0x78	; 120
    104e:	d1 e0       	ldi	r29, 0x01	; 1
    1050:	04 c0       	rjmp	.+8      	; 0x105a <uart_getchar+0xfc>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1052:	b7 01       	movw	r22, r14
    1054:	89 91       	ld	r24, Y+
    1056:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    105a:	c0 17       	cp	r28, r16
    105c:	d1 07       	cpc	r29, r17
    105e:	c8 f3       	brcs	.-14     	; 0x1052 <uart_getchar+0xf4>
    1060:	8e cf       	rjmp	.-228    	; 0xf7e <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1062:	b7 01       	movw	r22, r14
    1064:	88 e0       	ldi	r24, 0x08	; 8
    1066:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
		uart_putchar(' ', stream);
    106a:	b7 01       	movw	r22, r14
    106c:	80 e2       	ldi	r24, 0x20	; 32
    106e:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
		uart_putchar('\b', stream);
    1072:	b7 01       	movw	r22, r14
    1074:	88 e0       	ldi	r24, 0x08	; 8
    1076:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
		cp--;
    107a:	01 50       	subi	r16, 0x01	; 1
    107c:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	08 37       	cpi	r16, 0x78	; 120
    1082:	18 07       	cpc	r17, r24
    1084:	09 f0       	breq	.+2      	; 0x1088 <uart_getchar+0x12a>
    1086:	68 f7       	brcc	.-38     	; 0x1062 <uart_getchar+0x104>
    1088:	7a cf       	rjmp	.-268    	; 0xf7e <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    108a:	b7 01       	movw	r22, r14
    108c:	88 e0       	ldi	r24, 0x08	; 8
    108e:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
		uart_putchar(' ', stream);
    1092:	b7 01       	movw	r22, r14
    1094:	80 e2       	ldi	r24, 0x20	; 32
    1096:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
		uart_putchar('\b', stream);
    109a:	b7 01       	movw	r22, r14
    109c:	88 e0       	ldi	r24, 0x08	; 8
    109e:	0e 94 93 07 	call	0xf26	; 0xf26 <uart_putchar>
    10a2:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    10a4:	e1 e0       	ldi	r30, 0x01	; 1
    10a6:	08 37       	cpi	r16, 0x78	; 120
    10a8:	1e 07       	cpc	r17, r30
    10aa:	09 f0       	breq	.+2      	; 0x10ae <uart_getchar+0x150>
    10ac:	08 f4       	brcc	.+2      	; 0x10b0 <uart_getchar+0x152>
    10ae:	67 cf       	rjmp	.-306    	; 0xf7e <uart_getchar+0x20>
    10b0:	e8 01       	movw	r28, r16
    10b2:	8a 91       	ld	r24, -Y
    10b4:	80 32       	cpi	r24, 0x20	; 32
    10b6:	49 f7       	brne	.-46     	; 0x108a <uart_getchar+0x12c>
    10b8:	62 cf       	rjmp	.-316    	; 0xf7e <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    10ba:	e0 91 76 01 	lds	r30, 0x0176
    10be:	f0 91 77 01 	lds	r31, 0x0177
    10c2:	81 91       	ld	r24, Z+
    10c4:	f0 93 77 01 	sts	0x0177, r31
    10c8:	e0 93 76 01 	sts	0x0176, r30
  if (c == '\n')
    10cc:	8a 30       	cpi	r24, 0x0A	; 10
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <uart_getchar+0x17a>
    rxp = 0;
    10d0:	10 92 77 01 	sts	0x0177, r1
    10d4:	10 92 76 01 	sts	0x0176, r1

  return c;
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <uart_getchar+0x184>
    10de:	2f ef       	ldi	r18, 0xFF	; 255
    10e0:	3f ef       	ldi	r19, 0xFF	; 255
}
    10e2:	c9 01       	movw	r24, r18
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	08 95       	ret

000010f2 <exit>:
    10f2:	f8 94       	cli
    10f4:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <_exit>

000010f8 <fprintf>:
    10f8:	a0 e0       	ldi	r26, 0x00	; 0
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e8       	ldi	r30, 0x82	; 130
    10fe:	f8 e0       	ldi	r31, 0x08	; 8
    1100:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__prologue_saves__+0x20>
    1104:	ce 01       	movw	r24, r28
    1106:	09 96       	adiw	r24, 0x09	; 9
    1108:	ac 01       	movw	r20, r24
    110a:	6f 81       	ldd	r22, Y+7	; 0x07
    110c:	78 85       	ldd	r23, Y+8	; 0x08
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	0e 94 b8 08 	call	0x1170	; 0x1170 <vfprintf>
    1116:	20 96       	adiw	r28, 0x00	; 0
    1118:	e2 e0       	ldi	r30, 0x02	; 2
    111a:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__epilogue_restores__+0x20>

0000111e <fputs>:
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	7c 01       	movw	r14, r24
    112c:	8b 01       	movw	r16, r22
    112e:	db 01       	movw	r26, r22
    1130:	13 96       	adiw	r26, 0x03	; 3
    1132:	8c 91       	ld	r24, X
    1134:	81 fd       	sbrc	r24, 1
    1136:	03 c0       	rjmp	.+6      	; 0x113e <fputs+0x20>
    1138:	cf ef       	ldi	r28, 0xFF	; 255
    113a:	df ef       	ldi	r29, 0xFF	; 255
    113c:	13 c0       	rjmp	.+38     	; 0x1164 <fputs+0x46>
    113e:	c0 e0       	ldi	r28, 0x00	; 0
    1140:	d0 e0       	ldi	r29, 0x00	; 0
    1142:	0b c0       	rjmp	.+22     	; 0x115a <fputs+0x3c>
    1144:	d8 01       	movw	r26, r16
    1146:	18 96       	adiw	r26, 0x08	; 8
    1148:	ed 91       	ld	r30, X+
    114a:	fc 91       	ld	r31, X
    114c:	19 97       	sbiw	r26, 0x09	; 9
    114e:	b8 01       	movw	r22, r16
    1150:	09 95       	icall
    1152:	89 2b       	or	r24, r25
    1154:	11 f0       	breq	.+4      	; 0x115a <fputs+0x3c>
    1156:	cf ef       	ldi	r28, 0xFF	; 255
    1158:	df ef       	ldi	r29, 0xFF	; 255
    115a:	f7 01       	movw	r30, r14
    115c:	81 91       	ld	r24, Z+
    115e:	7f 01       	movw	r14, r30
    1160:	88 23       	and	r24, r24
    1162:	81 f7       	brne	.-32     	; 0x1144 <fputs+0x26>
    1164:	ce 01       	movw	r24, r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	e6 e0       	ldi	r30, 0x06	; 6
    116c:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__epilogue_restores__+0x18>

00001170 <vfprintf>:
    1170:	ab e0       	ldi	r26, 0x0B	; 11
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ee eb       	ldi	r30, 0xBE	; 190
    1176:	f8 e0       	ldi	r31, 0x08	; 8
    1178:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__prologue_saves__>
    117c:	3c 01       	movw	r6, r24
    117e:	2b 01       	movw	r4, r22
    1180:	5a 01       	movw	r10, r20
    1182:	fc 01       	movw	r30, r24
    1184:	17 82       	std	Z+7, r1	; 0x07
    1186:	16 82       	std	Z+6, r1	; 0x06
    1188:	83 81       	ldd	r24, Z+3	; 0x03
    118a:	81 fd       	sbrc	r24, 1
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <vfprintf+0x24>
    118e:	6f ef       	ldi	r22, 0xFF	; 255
    1190:	7f ef       	ldi	r23, 0xFF	; 255
    1192:	c8 c1       	rjmp	.+912    	; 0x1524 <vfprintf+0x3b4>
    1194:	9a e0       	ldi	r25, 0x0A	; 10
    1196:	89 2e       	mov	r8, r25
    1198:	1e 01       	movw	r2, r28
    119a:	08 94       	sec
    119c:	21 1c       	adc	r2, r1
    119e:	31 1c       	adc	r3, r1
    11a0:	f3 01       	movw	r30, r6
    11a2:	23 81       	ldd	r18, Z+3	; 0x03
    11a4:	f2 01       	movw	r30, r4
    11a6:	23 fd       	sbrc	r18, 3
    11a8:	85 91       	lpm	r24, Z+
    11aa:	23 ff       	sbrs	r18, 3
    11ac:	81 91       	ld	r24, Z+
    11ae:	2f 01       	movw	r4, r30
    11b0:	88 23       	and	r24, r24
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <vfprintf+0x46>
    11b4:	b4 c1       	rjmp	.+872    	; 0x151e <vfprintf+0x3ae>
    11b6:	85 32       	cpi	r24, 0x25	; 37
    11b8:	39 f4       	brne	.+14     	; 0x11c8 <vfprintf+0x58>
    11ba:	23 fd       	sbrc	r18, 3
    11bc:	85 91       	lpm	r24, Z+
    11be:	23 ff       	sbrs	r18, 3
    11c0:	81 91       	ld	r24, Z+
    11c2:	2f 01       	movw	r4, r30
    11c4:	85 32       	cpi	r24, 0x25	; 37
    11c6:	29 f4       	brne	.+10     	; 0x11d2 <vfprintf+0x62>
    11c8:	b3 01       	movw	r22, r6
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 ad 0a 	call	0x155a	; 0x155a <fputc>
    11d0:	e7 cf       	rjmp	.-50     	; 0x11a0 <vfprintf+0x30>
    11d2:	98 2f       	mov	r25, r24
    11d4:	dd 24       	eor	r13, r13
    11d6:	cc 24       	eor	r12, r12
    11d8:	99 24       	eor	r9, r9
    11da:	ff e1       	ldi	r31, 0x1F	; 31
    11dc:	fd 15       	cp	r31, r13
    11de:	d0 f0       	brcs	.+52     	; 0x1214 <vfprintf+0xa4>
    11e0:	9b 32       	cpi	r25, 0x2B	; 43
    11e2:	69 f0       	breq	.+26     	; 0x11fe <vfprintf+0x8e>
    11e4:	9c 32       	cpi	r25, 0x2C	; 44
    11e6:	28 f4       	brcc	.+10     	; 0x11f2 <vfprintf+0x82>
    11e8:	90 32       	cpi	r25, 0x20	; 32
    11ea:	59 f0       	breq	.+22     	; 0x1202 <vfprintf+0x92>
    11ec:	93 32       	cpi	r25, 0x23	; 35
    11ee:	91 f4       	brne	.+36     	; 0x1214 <vfprintf+0xa4>
    11f0:	0e c0       	rjmp	.+28     	; 0x120e <vfprintf+0x9e>
    11f2:	9d 32       	cpi	r25, 0x2D	; 45
    11f4:	49 f0       	breq	.+18     	; 0x1208 <vfprintf+0x98>
    11f6:	90 33       	cpi	r25, 0x30	; 48
    11f8:	69 f4       	brne	.+26     	; 0x1214 <vfprintf+0xa4>
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	24 c0       	rjmp	.+72     	; 0x1246 <vfprintf+0xd6>
    11fe:	52 e0       	ldi	r21, 0x02	; 2
    1200:	d5 2a       	or	r13, r21
    1202:	84 e0       	ldi	r24, 0x04	; 4
    1204:	d8 2a       	or	r13, r24
    1206:	28 c0       	rjmp	.+80     	; 0x1258 <vfprintf+0xe8>
    1208:	98 e0       	ldi	r25, 0x08	; 8
    120a:	d9 2a       	or	r13, r25
    120c:	25 c0       	rjmp	.+74     	; 0x1258 <vfprintf+0xe8>
    120e:	e0 e1       	ldi	r30, 0x10	; 16
    1210:	de 2a       	or	r13, r30
    1212:	22 c0       	rjmp	.+68     	; 0x1258 <vfprintf+0xe8>
    1214:	d7 fc       	sbrc	r13, 7
    1216:	29 c0       	rjmp	.+82     	; 0x126a <vfprintf+0xfa>
    1218:	89 2f       	mov	r24, r25
    121a:	80 53       	subi	r24, 0x30	; 48
    121c:	8a 30       	cpi	r24, 0x0A	; 10
    121e:	70 f4       	brcc	.+28     	; 0x123c <vfprintf+0xcc>
    1220:	d6 fe       	sbrs	r13, 6
    1222:	05 c0       	rjmp	.+10     	; 0x122e <vfprintf+0xbe>
    1224:	98 9c       	mul	r9, r8
    1226:	90 2c       	mov	r9, r0
    1228:	11 24       	eor	r1, r1
    122a:	98 0e       	add	r9, r24
    122c:	15 c0       	rjmp	.+42     	; 0x1258 <vfprintf+0xe8>
    122e:	c8 9c       	mul	r12, r8
    1230:	c0 2c       	mov	r12, r0
    1232:	11 24       	eor	r1, r1
    1234:	c8 0e       	add	r12, r24
    1236:	f0 e2       	ldi	r31, 0x20	; 32
    1238:	df 2a       	or	r13, r31
    123a:	0e c0       	rjmp	.+28     	; 0x1258 <vfprintf+0xe8>
    123c:	9e 32       	cpi	r25, 0x2E	; 46
    123e:	29 f4       	brne	.+10     	; 0x124a <vfprintf+0xda>
    1240:	d6 fc       	sbrc	r13, 6
    1242:	6d c1       	rjmp	.+730    	; 0x151e <vfprintf+0x3ae>
    1244:	40 e4       	ldi	r20, 0x40	; 64
    1246:	d4 2a       	or	r13, r20
    1248:	07 c0       	rjmp	.+14     	; 0x1258 <vfprintf+0xe8>
    124a:	9c 36       	cpi	r25, 0x6C	; 108
    124c:	19 f4       	brne	.+6      	; 0x1254 <vfprintf+0xe4>
    124e:	50 e8       	ldi	r21, 0x80	; 128
    1250:	d5 2a       	or	r13, r21
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <vfprintf+0xe8>
    1254:	98 36       	cpi	r25, 0x68	; 104
    1256:	49 f4       	brne	.+18     	; 0x126a <vfprintf+0xfa>
    1258:	f2 01       	movw	r30, r4
    125a:	23 fd       	sbrc	r18, 3
    125c:	95 91       	lpm	r25, Z+
    125e:	23 ff       	sbrs	r18, 3
    1260:	91 91       	ld	r25, Z+
    1262:	2f 01       	movw	r4, r30
    1264:	99 23       	and	r25, r25
    1266:	09 f0       	breq	.+2      	; 0x126a <vfprintf+0xfa>
    1268:	b8 cf       	rjmp	.-144    	; 0x11da <vfprintf+0x6a>
    126a:	89 2f       	mov	r24, r25
    126c:	85 54       	subi	r24, 0x45	; 69
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	18 f0       	brcs	.+6      	; 0x1278 <vfprintf+0x108>
    1272:	80 52       	subi	r24, 0x20	; 32
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	38 f4       	brcc	.+14     	; 0x1286 <vfprintf+0x116>
    1278:	44 e0       	ldi	r20, 0x04	; 4
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	a4 0e       	add	r10, r20
    127e:	b5 1e       	adc	r11, r21
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	59 83       	std	Y+1, r21	; 0x01
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <vfprintf+0x134>
    1286:	93 36       	cpi	r25, 0x63	; 99
    1288:	31 f0       	breq	.+12     	; 0x1296 <vfprintf+0x126>
    128a:	93 37       	cpi	r25, 0x73	; 115
    128c:	79 f0       	breq	.+30     	; 0x12ac <vfprintf+0x13c>
    128e:	93 35       	cpi	r25, 0x53	; 83
    1290:	09 f0       	breq	.+2      	; 0x1294 <vfprintf+0x124>
    1292:	56 c0       	rjmp	.+172    	; 0x1340 <vfprintf+0x1d0>
    1294:	20 c0       	rjmp	.+64     	; 0x12d6 <vfprintf+0x166>
    1296:	f5 01       	movw	r30, r10
    1298:	80 81       	ld	r24, Z
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	42 e0       	ldi	r20, 0x02	; 2
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	a4 0e       	add	r10, r20
    12a2:	b5 1e       	adc	r11, r21
    12a4:	71 01       	movw	r14, r2
    12a6:	01 e0       	ldi	r16, 0x01	; 1
    12a8:	10 e0       	ldi	r17, 0x00	; 0
    12aa:	12 c0       	rjmp	.+36     	; 0x12d0 <vfprintf+0x160>
    12ac:	f5 01       	movw	r30, r10
    12ae:	e0 80       	ld	r14, Z
    12b0:	f1 80       	ldd	r15, Z+1	; 0x01
    12b2:	d6 fc       	sbrc	r13, 6
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <vfprintf+0x14c>
    12b6:	6f ef       	ldi	r22, 0xFF	; 255
    12b8:	7f ef       	ldi	r23, 0xFF	; 255
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <vfprintf+0x150>
    12bc:	69 2d       	mov	r22, r9
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	42 e0       	ldi	r20, 0x02	; 2
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	a4 0e       	add	r10, r20
    12c6:	b5 1e       	adc	r11, r21
    12c8:	c7 01       	movw	r24, r14
    12ca:	0e 94 a2 0a 	call	0x1544	; 0x1544 <strnlen>
    12ce:	8c 01       	movw	r16, r24
    12d0:	5f e7       	ldi	r21, 0x7F	; 127
    12d2:	d5 22       	and	r13, r21
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <vfprintf+0x18e>
    12d6:	f5 01       	movw	r30, r10
    12d8:	e0 80       	ld	r14, Z
    12da:	f1 80       	ldd	r15, Z+1	; 0x01
    12dc:	d6 fc       	sbrc	r13, 6
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <vfprintf+0x176>
    12e0:	6f ef       	ldi	r22, 0xFF	; 255
    12e2:	7f ef       	ldi	r23, 0xFF	; 255
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <vfprintf+0x17a>
    12e6:	69 2d       	mov	r22, r9
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	42 e0       	ldi	r20, 0x02	; 2
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	a4 0e       	add	r10, r20
    12f0:	b5 1e       	adc	r11, r21
    12f2:	c7 01       	movw	r24, r14
    12f4:	0e 94 97 0a 	call	0x152e	; 0x152e <strnlen_P>
    12f8:	8c 01       	movw	r16, r24
    12fa:	50 e8       	ldi	r21, 0x80	; 128
    12fc:	d5 2a       	or	r13, r21
    12fe:	d3 fe       	sbrs	r13, 3
    1300:	07 c0       	rjmp	.+14     	; 0x1310 <vfprintf+0x1a0>
    1302:	1a c0       	rjmp	.+52     	; 0x1338 <vfprintf+0x1c8>
    1304:	b3 01       	movw	r22, r6
    1306:	80 e2       	ldi	r24, 0x20	; 32
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 ad 0a 	call	0x155a	; 0x155a <fputc>
    130e:	ca 94       	dec	r12
    1310:	8c 2d       	mov	r24, r12
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	08 17       	cp	r16, r24
    1316:	19 07       	cpc	r17, r25
    1318:	a8 f3       	brcs	.-22     	; 0x1304 <vfprintf+0x194>
    131a:	0e c0       	rjmp	.+28     	; 0x1338 <vfprintf+0x1c8>
    131c:	f7 01       	movw	r30, r14
    131e:	d7 fc       	sbrc	r13, 7
    1320:	85 91       	lpm	r24, Z+
    1322:	d7 fe       	sbrs	r13, 7
    1324:	81 91       	ld	r24, Z+
    1326:	7f 01       	movw	r14, r30
    1328:	b3 01       	movw	r22, r6
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 ad 0a 	call	0x155a	; 0x155a <fputc>
    1330:	c1 10       	cpse	r12, r1
    1332:	ca 94       	dec	r12
    1334:	01 50       	subi	r16, 0x01	; 1
    1336:	10 40       	sbci	r17, 0x00	; 0
    1338:	01 15       	cp	r16, r1
    133a:	11 05       	cpc	r17, r1
    133c:	79 f7       	brne	.-34     	; 0x131c <vfprintf+0x1ac>
    133e:	ec c0       	rjmp	.+472    	; 0x1518 <vfprintf+0x3a8>
    1340:	94 36       	cpi	r25, 0x64	; 100
    1342:	11 f0       	breq	.+4      	; 0x1348 <vfprintf+0x1d8>
    1344:	99 36       	cpi	r25, 0x69	; 105
    1346:	71 f5       	brne	.+92     	; 0x13a4 <vfprintf+0x234>
    1348:	d7 fe       	sbrs	r13, 7
    134a:	08 c0       	rjmp	.+16     	; 0x135c <vfprintf+0x1ec>
    134c:	f5 01       	movw	r30, r10
    134e:	e0 80       	ld	r14, Z
    1350:	f1 80       	ldd	r15, Z+1	; 0x01
    1352:	02 81       	ldd	r16, Z+2	; 0x02
    1354:	13 81       	ldd	r17, Z+3	; 0x03
    1356:	44 e0       	ldi	r20, 0x04	; 4
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	0a c0       	rjmp	.+20     	; 0x1370 <vfprintf+0x200>
    135c:	f5 01       	movw	r30, r10
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	7c 01       	movw	r14, r24
    1364:	00 27       	eor	r16, r16
    1366:	f7 fc       	sbrc	r15, 7
    1368:	00 95       	com	r16
    136a:	10 2f       	mov	r17, r16
    136c:	42 e0       	ldi	r20, 0x02	; 2
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	a4 0e       	add	r10, r20
    1372:	b5 1e       	adc	r11, r21
    1374:	5f e6       	ldi	r21, 0x6F	; 111
    1376:	d5 22       	and	r13, r21
    1378:	17 ff       	sbrs	r17, 7
    137a:	0a c0       	rjmp	.+20     	; 0x1390 <vfprintf+0x220>
    137c:	10 95       	com	r17
    137e:	00 95       	com	r16
    1380:	f0 94       	com	r15
    1382:	e0 94       	com	r14
    1384:	e1 1c       	adc	r14, r1
    1386:	f1 1c       	adc	r15, r1
    1388:	01 1d       	adc	r16, r1
    138a:	11 1d       	adc	r17, r1
    138c:	80 e8       	ldi	r24, 0x80	; 128
    138e:	d8 2a       	or	r13, r24
    1390:	2a e0       	ldi	r18, 0x0A	; 10
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	a1 01       	movw	r20, r2
    1396:	c8 01       	movw	r24, r16
    1398:	b7 01       	movw	r22, r14
    139a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__ultoa_invert>
    139e:	f8 2e       	mov	r15, r24
    13a0:	f2 18       	sub	r15, r2
    13a2:	40 c0       	rjmp	.+128    	; 0x1424 <vfprintf+0x2b4>
    13a4:	95 37       	cpi	r25, 0x75	; 117
    13a6:	29 f4       	brne	.+10     	; 0x13b2 <vfprintf+0x242>
    13a8:	1d 2d       	mov	r17, r13
    13aa:	1f 7e       	andi	r17, 0xEF	; 239
    13ac:	2a e0       	ldi	r18, 0x0A	; 10
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	1d c0       	rjmp	.+58     	; 0x13ec <vfprintf+0x27c>
    13b2:	1d 2d       	mov	r17, r13
    13b4:	19 7f       	andi	r17, 0xF9	; 249
    13b6:	9f 36       	cpi	r25, 0x6F	; 111
    13b8:	61 f0       	breq	.+24     	; 0x13d2 <vfprintf+0x262>
    13ba:	90 37       	cpi	r25, 0x70	; 112
    13bc:	20 f4       	brcc	.+8      	; 0x13c6 <vfprintf+0x256>
    13be:	98 35       	cpi	r25, 0x58	; 88
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <vfprintf+0x254>
    13c2:	ad c0       	rjmp	.+346    	; 0x151e <vfprintf+0x3ae>
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <vfprintf+0x274>
    13c6:	90 37       	cpi	r25, 0x70	; 112
    13c8:	39 f0       	breq	.+14     	; 0x13d8 <vfprintf+0x268>
    13ca:	98 37       	cpi	r25, 0x78	; 120
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <vfprintf+0x260>
    13ce:	a7 c0       	rjmp	.+334    	; 0x151e <vfprintf+0x3ae>
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <vfprintf+0x26a>
    13d2:	28 e0       	ldi	r18, 0x08	; 8
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	0a c0       	rjmp	.+20     	; 0x13ec <vfprintf+0x27c>
    13d8:	10 61       	ori	r17, 0x10	; 16
    13da:	14 fd       	sbrc	r17, 4
    13dc:	14 60       	ori	r17, 0x04	; 4
    13de:	20 e1       	ldi	r18, 0x10	; 16
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <vfprintf+0x27c>
    13e4:	14 fd       	sbrc	r17, 4
    13e6:	16 60       	ori	r17, 0x06	; 6
    13e8:	20 e1       	ldi	r18, 0x10	; 16
    13ea:	32 e0       	ldi	r19, 0x02	; 2
    13ec:	17 ff       	sbrs	r17, 7
    13ee:	08 c0       	rjmp	.+16     	; 0x1400 <vfprintf+0x290>
    13f0:	f5 01       	movw	r30, r10
    13f2:	60 81       	ld	r22, Z
    13f4:	71 81       	ldd	r23, Z+1	; 0x01
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	44 e0       	ldi	r20, 0x04	; 4
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	08 c0       	rjmp	.+16     	; 0x1410 <vfprintf+0x2a0>
    1400:	f5 01       	movw	r30, r10
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	bc 01       	movw	r22, r24
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	42 e0       	ldi	r20, 0x02	; 2
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	a4 0e       	add	r10, r20
    1412:	b5 1e       	adc	r11, r21
    1414:	a1 01       	movw	r20, r2
    1416:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__ultoa_invert>
    141a:	f8 2e       	mov	r15, r24
    141c:	f2 18       	sub	r15, r2
    141e:	8f e7       	ldi	r24, 0x7F	; 127
    1420:	d8 2e       	mov	r13, r24
    1422:	d1 22       	and	r13, r17
    1424:	d6 fe       	sbrs	r13, 6
    1426:	0b c0       	rjmp	.+22     	; 0x143e <vfprintf+0x2ce>
    1428:	5e ef       	ldi	r21, 0xFE	; 254
    142a:	d5 22       	and	r13, r21
    142c:	f9 14       	cp	r15, r9
    142e:	38 f4       	brcc	.+14     	; 0x143e <vfprintf+0x2ce>
    1430:	d4 fe       	sbrs	r13, 4
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <vfprintf+0x2d2>
    1434:	d2 fc       	sbrc	r13, 2
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <vfprintf+0x2d2>
    1438:	8f ee       	ldi	r24, 0xEF	; 239
    143a:	d8 22       	and	r13, r24
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <vfprintf+0x2d2>
    143e:	1f 2d       	mov	r17, r15
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <vfprintf+0x2d4>
    1442:	19 2d       	mov	r17, r9
    1444:	d4 fe       	sbrs	r13, 4
    1446:	0d c0       	rjmp	.+26     	; 0x1462 <vfprintf+0x2f2>
    1448:	fe 01       	movw	r30, r28
    144a:	ef 0d       	add	r30, r15
    144c:	f1 1d       	adc	r31, r1
    144e:	80 81       	ld	r24, Z
    1450:	80 33       	cpi	r24, 0x30	; 48
    1452:	19 f4       	brne	.+6      	; 0x145a <vfprintf+0x2ea>
    1454:	99 ee       	ldi	r25, 0xE9	; 233
    1456:	d9 22       	and	r13, r25
    1458:	08 c0       	rjmp	.+16     	; 0x146a <vfprintf+0x2fa>
    145a:	1f 5f       	subi	r17, 0xFF	; 255
    145c:	d2 fe       	sbrs	r13, 2
    145e:	05 c0       	rjmp	.+10     	; 0x146a <vfprintf+0x2fa>
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <vfprintf+0x2f8>
    1462:	8d 2d       	mov	r24, r13
    1464:	86 78       	andi	r24, 0x86	; 134
    1466:	09 f0       	breq	.+2      	; 0x146a <vfprintf+0x2fa>
    1468:	1f 5f       	subi	r17, 0xFF	; 255
    146a:	0d 2d       	mov	r16, r13
    146c:	d3 fc       	sbrc	r13, 3
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <vfprintf+0x328>
    1470:	d0 fe       	sbrs	r13, 0
    1472:	0f c0       	rjmp	.+30     	; 0x1492 <vfprintf+0x322>
    1474:	1c 15       	cp	r17, r12
    1476:	10 f0       	brcs	.+4      	; 0x147c <vfprintf+0x30c>
    1478:	9f 2c       	mov	r9, r15
    147a:	0b c0       	rjmp	.+22     	; 0x1492 <vfprintf+0x322>
    147c:	9f 2c       	mov	r9, r15
    147e:	9c 0c       	add	r9, r12
    1480:	91 1a       	sub	r9, r17
    1482:	1c 2d       	mov	r17, r12
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <vfprintf+0x322>
    1486:	b3 01       	movw	r22, r6
    1488:	80 e2       	ldi	r24, 0x20	; 32
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 ad 0a 	call	0x155a	; 0x155a <fputc>
    1490:	1f 5f       	subi	r17, 0xFF	; 255
    1492:	1c 15       	cp	r17, r12
    1494:	c0 f3       	brcs	.-16     	; 0x1486 <vfprintf+0x316>
    1496:	04 c0       	rjmp	.+8      	; 0x14a0 <vfprintf+0x330>
    1498:	1c 15       	cp	r17, r12
    149a:	10 f4       	brcc	.+4      	; 0x14a0 <vfprintf+0x330>
    149c:	c1 1a       	sub	r12, r17
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <vfprintf+0x332>
    14a0:	cc 24       	eor	r12, r12
    14a2:	04 ff       	sbrs	r16, 4
    14a4:	10 c0       	rjmp	.+32     	; 0x14c6 <vfprintf+0x356>
    14a6:	b3 01       	movw	r22, r6
    14a8:	80 e3       	ldi	r24, 0x30	; 48
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 ad 0a 	call	0x155a	; 0x155a <fputc>
    14b0:	02 ff       	sbrs	r16, 2
    14b2:	1e c0       	rjmp	.+60     	; 0x14f0 <vfprintf+0x380>
    14b4:	01 fd       	sbrc	r16, 1
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <vfprintf+0x34e>
    14b8:	88 e7       	ldi	r24, 0x78	; 120
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0x352>
    14be:	88 e5       	ldi	r24, 0x58	; 88
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	b3 01       	movw	r22, r6
    14c4:	0c c0       	rjmp	.+24     	; 0x14de <vfprintf+0x36e>
    14c6:	80 2f       	mov	r24, r16
    14c8:	86 78       	andi	r24, 0x86	; 134
    14ca:	91 f0       	breq	.+36     	; 0x14f0 <vfprintf+0x380>
    14cc:	01 ff       	sbrs	r16, 1
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <vfprintf+0x364>
    14d0:	8b e2       	ldi	r24, 0x2B	; 43
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <vfprintf+0x366>
    14d4:	80 e2       	ldi	r24, 0x20	; 32
    14d6:	d7 fc       	sbrc	r13, 7
    14d8:	8d e2       	ldi	r24, 0x2D	; 45
    14da:	b3 01       	movw	r22, r6
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 ad 0a 	call	0x155a	; 0x155a <fputc>
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <vfprintf+0x380>
    14e4:	b3 01       	movw	r22, r6
    14e6:	80 e3       	ldi	r24, 0x30	; 48
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 ad 0a 	call	0x155a	; 0x155a <fputc>
    14ee:	9a 94       	dec	r9
    14f0:	f9 14       	cp	r15, r9
    14f2:	c0 f3       	brcs	.-16     	; 0x14e4 <vfprintf+0x374>
    14f4:	fa 94       	dec	r15
    14f6:	f1 01       	movw	r30, r2
    14f8:	ef 0d       	add	r30, r15
    14fa:	f1 1d       	adc	r31, r1
    14fc:	b3 01       	movw	r22, r6
    14fe:	80 81       	ld	r24, Z
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 ad 0a 	call	0x155a	; 0x155a <fputc>
    1506:	ff 20       	and	r15, r15
    1508:	a9 f7       	brne	.-22     	; 0x14f4 <vfprintf+0x384>
    150a:	06 c0       	rjmp	.+12     	; 0x1518 <vfprintf+0x3a8>
    150c:	b3 01       	movw	r22, r6
    150e:	80 e2       	ldi	r24, 0x20	; 32
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 ad 0a 	call	0x155a	; 0x155a <fputc>
    1516:	ca 94       	dec	r12
    1518:	cc 20       	and	r12, r12
    151a:	c1 f7       	brne	.-16     	; 0x150c <vfprintf+0x39c>
    151c:	41 ce       	rjmp	.-894    	; 0x11a0 <vfprintf+0x30>
    151e:	f3 01       	movw	r30, r6
    1520:	66 81       	ldd	r22, Z+6	; 0x06
    1522:	77 81       	ldd	r23, Z+7	; 0x07
    1524:	cb 01       	movw	r24, r22
    1526:	2b 96       	adiw	r28, 0x0b	; 11
    1528:	e2 e1       	ldi	r30, 0x12	; 18
    152a:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__epilogue_restores__>

0000152e <strnlen_P>:
    152e:	fc 01       	movw	r30, r24
    1530:	05 90       	lpm	r0, Z+
    1532:	61 50       	subi	r22, 0x01	; 1
    1534:	70 40       	sbci	r23, 0x00	; 0
    1536:	01 10       	cpse	r0, r1
    1538:	d8 f7       	brcc	.-10     	; 0x1530 <strnlen_P+0x2>
    153a:	80 95       	com	r24
    153c:	90 95       	com	r25
    153e:	8e 0f       	add	r24, r30
    1540:	9f 1f       	adc	r25, r31
    1542:	08 95       	ret

00001544 <strnlen>:
    1544:	fc 01       	movw	r30, r24
    1546:	61 50       	subi	r22, 0x01	; 1
    1548:	70 40       	sbci	r23, 0x00	; 0
    154a:	01 90       	ld	r0, Z+
    154c:	01 10       	cpse	r0, r1
    154e:	d8 f7       	brcc	.-10     	; 0x1546 <strnlen+0x2>
    1550:	80 95       	com	r24
    1552:	90 95       	com	r25
    1554:	8e 0f       	add	r24, r30
    1556:	9f 1f       	adc	r25, r31
    1558:	08 95       	ret

0000155a <fputc>:
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	8c 01       	movw	r16, r24
    1564:	eb 01       	movw	r28, r22
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	81 ff       	sbrs	r24, 1
    156a:	1b c0       	rjmp	.+54     	; 0x15a2 <fputc+0x48>
    156c:	82 ff       	sbrs	r24, 2
    156e:	0d c0       	rjmp	.+26     	; 0x158a <fputc+0x30>
    1570:	2e 81       	ldd	r18, Y+6	; 0x06
    1572:	3f 81       	ldd	r19, Y+7	; 0x07
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	28 17       	cp	r18, r24
    157a:	39 07       	cpc	r19, r25
    157c:	64 f4       	brge	.+24     	; 0x1596 <fputc+0x3c>
    157e:	e8 81       	ld	r30, Y
    1580:	f9 81       	ldd	r31, Y+1	; 0x01
    1582:	01 93       	st	Z+, r16
    1584:	f9 83       	std	Y+1, r31	; 0x01
    1586:	e8 83       	st	Y, r30
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <fputc+0x3c>
    158a:	e8 85       	ldd	r30, Y+8	; 0x08
    158c:	f9 85       	ldd	r31, Y+9	; 0x09
    158e:	80 2f       	mov	r24, r16
    1590:	09 95       	icall
    1592:	89 2b       	or	r24, r25
    1594:	31 f4       	brne	.+12     	; 0x15a2 <fputc+0x48>
    1596:	8e 81       	ldd	r24, Y+6	; 0x06
    1598:	9f 81       	ldd	r25, Y+7	; 0x07
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	9f 83       	std	Y+7, r25	; 0x07
    159e:	8e 83       	std	Y+6, r24	; 0x06
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <fputc+0x4c>
    15a2:	0f ef       	ldi	r16, 0xFF	; 255
    15a4:	1f ef       	ldi	r17, 0xFF	; 255
    15a6:	c8 01       	movw	r24, r16
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	08 95       	ret

000015b2 <__ultoa_invert>:
    15b2:	fa 01       	movw	r30, r20
    15b4:	aa 27       	eor	r26, r26
    15b6:	28 30       	cpi	r18, 0x08	; 8
    15b8:	51 f1       	breq	.+84     	; 0x160e <__ultoa_invert+0x5c>
    15ba:	20 31       	cpi	r18, 0x10	; 16
    15bc:	81 f1       	breq	.+96     	; 0x161e <__ultoa_invert+0x6c>
    15be:	e8 94       	clt
    15c0:	6f 93       	push	r22
    15c2:	6e 7f       	andi	r22, 0xFE	; 254
    15c4:	6e 5f       	subi	r22, 0xFE	; 254
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	af 4f       	sbci	r26, 0xFF	; 255
    15ce:	b1 e0       	ldi	r27, 0x01	; 1
    15d0:	3e d0       	rcall	.+124    	; 0x164e <__ultoa_invert+0x9c>
    15d2:	b4 e0       	ldi	r27, 0x04	; 4
    15d4:	3c d0       	rcall	.+120    	; 0x164e <__ultoa_invert+0x9c>
    15d6:	67 0f       	add	r22, r23
    15d8:	78 1f       	adc	r23, r24
    15da:	89 1f       	adc	r24, r25
    15dc:	9a 1f       	adc	r25, r26
    15de:	a1 1d       	adc	r26, r1
    15e0:	68 0f       	add	r22, r24
    15e2:	79 1f       	adc	r23, r25
    15e4:	8a 1f       	adc	r24, r26
    15e6:	91 1d       	adc	r25, r1
    15e8:	a1 1d       	adc	r26, r1
    15ea:	6a 0f       	add	r22, r26
    15ec:	71 1d       	adc	r23, r1
    15ee:	81 1d       	adc	r24, r1
    15f0:	91 1d       	adc	r25, r1
    15f2:	a1 1d       	adc	r26, r1
    15f4:	20 d0       	rcall	.+64     	; 0x1636 <__ultoa_invert+0x84>
    15f6:	09 f4       	brne	.+2      	; 0x15fa <__ultoa_invert+0x48>
    15f8:	68 94       	set
    15fa:	3f 91       	pop	r19
    15fc:	2a e0       	ldi	r18, 0x0A	; 10
    15fe:	26 9f       	mul	r18, r22
    1600:	11 24       	eor	r1, r1
    1602:	30 19       	sub	r19, r0
    1604:	30 5d       	subi	r19, 0xD0	; 208
    1606:	31 93       	st	Z+, r19
    1608:	de f6       	brtc	.-74     	; 0x15c0 <__ultoa_invert+0xe>
    160a:	cf 01       	movw	r24, r30
    160c:	08 95       	ret
    160e:	46 2f       	mov	r20, r22
    1610:	47 70       	andi	r20, 0x07	; 7
    1612:	40 5d       	subi	r20, 0xD0	; 208
    1614:	41 93       	st	Z+, r20
    1616:	b3 e0       	ldi	r27, 0x03	; 3
    1618:	0f d0       	rcall	.+30     	; 0x1638 <__ultoa_invert+0x86>
    161a:	c9 f7       	brne	.-14     	; 0x160e <__ultoa_invert+0x5c>
    161c:	f6 cf       	rjmp	.-20     	; 0x160a <__ultoa_invert+0x58>
    161e:	46 2f       	mov	r20, r22
    1620:	4f 70       	andi	r20, 0x0F	; 15
    1622:	40 5d       	subi	r20, 0xD0	; 208
    1624:	4a 33       	cpi	r20, 0x3A	; 58
    1626:	18 f0       	brcs	.+6      	; 0x162e <__ultoa_invert+0x7c>
    1628:	49 5d       	subi	r20, 0xD9	; 217
    162a:	31 fd       	sbrc	r19, 1
    162c:	40 52       	subi	r20, 0x20	; 32
    162e:	41 93       	st	Z+, r20
    1630:	02 d0       	rcall	.+4      	; 0x1636 <__ultoa_invert+0x84>
    1632:	a9 f7       	brne	.-22     	; 0x161e <__ultoa_invert+0x6c>
    1634:	ea cf       	rjmp	.-44     	; 0x160a <__ultoa_invert+0x58>
    1636:	b4 e0       	ldi	r27, 0x04	; 4
    1638:	a6 95       	lsr	r26
    163a:	97 95       	ror	r25
    163c:	87 95       	ror	r24
    163e:	77 95       	ror	r23
    1640:	67 95       	ror	r22
    1642:	ba 95       	dec	r27
    1644:	c9 f7       	brne	.-14     	; 0x1638 <__ultoa_invert+0x86>
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	61 05       	cpc	r22, r1
    164a:	71 05       	cpc	r23, r1
    164c:	08 95       	ret
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	0a 2e       	mov	r0, r26
    1654:	06 94       	lsr	r0
    1656:	57 95       	ror	r21
    1658:	47 95       	ror	r20
    165a:	37 95       	ror	r19
    165c:	27 95       	ror	r18
    165e:	ba 95       	dec	r27
    1660:	c9 f7       	brne	.-14     	; 0x1654 <__ultoa_invert+0xa2>
    1662:	62 0f       	add	r22, r18
    1664:	73 1f       	adc	r23, r19
    1666:	84 1f       	adc	r24, r20
    1668:	95 1f       	adc	r25, r21
    166a:	a0 1d       	adc	r26, r0
    166c:	08 95       	ret

0000166e <__subsf3>:
    166e:	50 58       	subi	r21, 0x80	; 128

00001670 <__addsf3>:
    1670:	bb 27       	eor	r27, r27
    1672:	aa 27       	eor	r26, r26
    1674:	0e d0       	rcall	.+28     	; 0x1692 <__addsf3x>
    1676:	b4 c0       	rjmp	.+360    	; 0x17e0 <__fp_round>
    1678:	a5 d0       	rcall	.+330    	; 0x17c4 <__fp_pscA>
    167a:	30 f0       	brcs	.+12     	; 0x1688 <__addsf3+0x18>
    167c:	aa d0       	rcall	.+340    	; 0x17d2 <__fp_pscB>
    167e:	20 f0       	brcs	.+8      	; 0x1688 <__addsf3+0x18>
    1680:	31 f4       	brne	.+12     	; 0x168e <__addsf3+0x1e>
    1682:	9f 3f       	cpi	r25, 0xFF	; 255
    1684:	11 f4       	brne	.+4      	; 0x168a <__addsf3+0x1a>
    1686:	1e f4       	brtc	.+6      	; 0x168e <__addsf3+0x1e>
    1688:	9a c0       	rjmp	.+308    	; 0x17be <__fp_nan>
    168a:	0e f4       	brtc	.+2      	; 0x168e <__addsf3+0x1e>
    168c:	e0 95       	com	r30
    168e:	e7 fb       	bst	r30, 7
    1690:	90 c0       	rjmp	.+288    	; 0x17b2 <__fp_inf>

00001692 <__addsf3x>:
    1692:	e9 2f       	mov	r30, r25
    1694:	b6 d0       	rcall	.+364    	; 0x1802 <__fp_split3>
    1696:	80 f3       	brcs	.-32     	; 0x1678 <__addsf3+0x8>
    1698:	ba 17       	cp	r27, r26
    169a:	62 07       	cpc	r22, r18
    169c:	73 07       	cpc	r23, r19
    169e:	84 07       	cpc	r24, r20
    16a0:	95 07       	cpc	r25, r21
    16a2:	18 f0       	brcs	.+6      	; 0x16aa <__addsf3x+0x18>
    16a4:	71 f4       	brne	.+28     	; 0x16c2 <__addsf3x+0x30>
    16a6:	9e f5       	brtc	.+102    	; 0x170e <__addsf3x+0x7c>
    16a8:	ce c0       	rjmp	.+412    	; 0x1846 <__fp_zero>
    16aa:	0e f4       	brtc	.+2      	; 0x16ae <__addsf3x+0x1c>
    16ac:	e0 95       	com	r30
    16ae:	0b 2e       	mov	r0, r27
    16b0:	ba 2f       	mov	r27, r26
    16b2:	a0 2d       	mov	r26, r0
    16b4:	0b 01       	movw	r0, r22
    16b6:	b9 01       	movw	r22, r18
    16b8:	90 01       	movw	r18, r0
    16ba:	0c 01       	movw	r0, r24
    16bc:	ca 01       	movw	r24, r20
    16be:	a0 01       	movw	r20, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	ff 27       	eor	r31, r31
    16c4:	59 1b       	sub	r21, r25
    16c6:	99 f0       	breq	.+38     	; 0x16ee <__addsf3x+0x5c>
    16c8:	59 3f       	cpi	r21, 0xF9	; 249
    16ca:	50 f4       	brcc	.+20     	; 0x16e0 <__addsf3x+0x4e>
    16cc:	50 3e       	cpi	r21, 0xE0	; 224
    16ce:	68 f1       	brcs	.+90     	; 0x172a <__addsf3x+0x98>
    16d0:	1a 16       	cp	r1, r26
    16d2:	f0 40       	sbci	r31, 0x00	; 0
    16d4:	a2 2f       	mov	r26, r18
    16d6:	23 2f       	mov	r18, r19
    16d8:	34 2f       	mov	r19, r20
    16da:	44 27       	eor	r20, r20
    16dc:	58 5f       	subi	r21, 0xF8	; 248
    16de:	f3 cf       	rjmp	.-26     	; 0x16c6 <__addsf3x+0x34>
    16e0:	46 95       	lsr	r20
    16e2:	37 95       	ror	r19
    16e4:	27 95       	ror	r18
    16e6:	a7 95       	ror	r26
    16e8:	f0 40       	sbci	r31, 0x00	; 0
    16ea:	53 95       	inc	r21
    16ec:	c9 f7       	brne	.-14     	; 0x16e0 <__addsf3x+0x4e>
    16ee:	7e f4       	brtc	.+30     	; 0x170e <__addsf3x+0x7c>
    16f0:	1f 16       	cp	r1, r31
    16f2:	ba 0b       	sbc	r27, r26
    16f4:	62 0b       	sbc	r22, r18
    16f6:	73 0b       	sbc	r23, r19
    16f8:	84 0b       	sbc	r24, r20
    16fa:	ba f0       	brmi	.+46     	; 0x172a <__addsf3x+0x98>
    16fc:	91 50       	subi	r25, 0x01	; 1
    16fe:	a1 f0       	breq	.+40     	; 0x1728 <__addsf3x+0x96>
    1700:	ff 0f       	add	r31, r31
    1702:	bb 1f       	adc	r27, r27
    1704:	66 1f       	adc	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	c2 f7       	brpl	.-16     	; 0x16fc <__addsf3x+0x6a>
    170c:	0e c0       	rjmp	.+28     	; 0x172a <__addsf3x+0x98>
    170e:	ba 0f       	add	r27, r26
    1710:	62 1f       	adc	r22, r18
    1712:	73 1f       	adc	r23, r19
    1714:	84 1f       	adc	r24, r20
    1716:	48 f4       	brcc	.+18     	; 0x172a <__addsf3x+0x98>
    1718:	87 95       	ror	r24
    171a:	77 95       	ror	r23
    171c:	67 95       	ror	r22
    171e:	b7 95       	ror	r27
    1720:	f7 95       	ror	r31
    1722:	9e 3f       	cpi	r25, 0xFE	; 254
    1724:	08 f0       	brcs	.+2      	; 0x1728 <__addsf3x+0x96>
    1726:	b3 cf       	rjmp	.-154    	; 0x168e <__addsf3+0x1e>
    1728:	93 95       	inc	r25
    172a:	88 0f       	add	r24, r24
    172c:	08 f0       	brcs	.+2      	; 0x1730 <__addsf3x+0x9e>
    172e:	99 27       	eor	r25, r25
    1730:	ee 0f       	add	r30, r30
    1732:	97 95       	ror	r25
    1734:	87 95       	ror	r24
    1736:	08 95       	ret

00001738 <__floatunsisf>:
    1738:	e8 94       	clt
    173a:	09 c0       	rjmp	.+18     	; 0x174e <__floatsisf+0x12>

0000173c <__floatsisf>:
    173c:	97 fb       	bst	r25, 7
    173e:	3e f4       	brtc	.+14     	; 0x174e <__floatsisf+0x12>
    1740:	90 95       	com	r25
    1742:	80 95       	com	r24
    1744:	70 95       	com	r23
    1746:	61 95       	neg	r22
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	8f 4f       	sbci	r24, 0xFF	; 255
    174c:	9f 4f       	sbci	r25, 0xFF	; 255
    174e:	99 23       	and	r25, r25
    1750:	a9 f0       	breq	.+42     	; 0x177c <__floatsisf+0x40>
    1752:	f9 2f       	mov	r31, r25
    1754:	96 e9       	ldi	r25, 0x96	; 150
    1756:	bb 27       	eor	r27, r27
    1758:	93 95       	inc	r25
    175a:	f6 95       	lsr	r31
    175c:	87 95       	ror	r24
    175e:	77 95       	ror	r23
    1760:	67 95       	ror	r22
    1762:	b7 95       	ror	r27
    1764:	f1 11       	cpse	r31, r1
    1766:	f8 cf       	rjmp	.-16     	; 0x1758 <__floatsisf+0x1c>
    1768:	fa f4       	brpl	.+62     	; 0x17a8 <__floatsisf+0x6c>
    176a:	bb 0f       	add	r27, r27
    176c:	11 f4       	brne	.+4      	; 0x1772 <__floatsisf+0x36>
    176e:	60 ff       	sbrs	r22, 0
    1770:	1b c0       	rjmp	.+54     	; 0x17a8 <__floatsisf+0x6c>
    1772:	6f 5f       	subi	r22, 0xFF	; 255
    1774:	7f 4f       	sbci	r23, 0xFF	; 255
    1776:	8f 4f       	sbci	r24, 0xFF	; 255
    1778:	9f 4f       	sbci	r25, 0xFF	; 255
    177a:	16 c0       	rjmp	.+44     	; 0x17a8 <__floatsisf+0x6c>
    177c:	88 23       	and	r24, r24
    177e:	11 f0       	breq	.+4      	; 0x1784 <__floatsisf+0x48>
    1780:	96 e9       	ldi	r25, 0x96	; 150
    1782:	11 c0       	rjmp	.+34     	; 0x17a6 <__floatsisf+0x6a>
    1784:	77 23       	and	r23, r23
    1786:	21 f0       	breq	.+8      	; 0x1790 <__floatsisf+0x54>
    1788:	9e e8       	ldi	r25, 0x8E	; 142
    178a:	87 2f       	mov	r24, r23
    178c:	76 2f       	mov	r23, r22
    178e:	05 c0       	rjmp	.+10     	; 0x179a <__floatsisf+0x5e>
    1790:	66 23       	and	r22, r22
    1792:	71 f0       	breq	.+28     	; 0x17b0 <__floatsisf+0x74>
    1794:	96 e8       	ldi	r25, 0x86	; 134
    1796:	86 2f       	mov	r24, r22
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	2a f0       	brmi	.+10     	; 0x17a8 <__floatsisf+0x6c>
    179e:	9a 95       	dec	r25
    17a0:	66 0f       	add	r22, r22
    17a2:	77 1f       	adc	r23, r23
    17a4:	88 1f       	adc	r24, r24
    17a6:	da f7       	brpl	.-10     	; 0x179e <__floatsisf+0x62>
    17a8:	88 0f       	add	r24, r24
    17aa:	96 95       	lsr	r25
    17ac:	87 95       	ror	r24
    17ae:	97 f9       	bld	r25, 7
    17b0:	08 95       	ret

000017b2 <__fp_inf>:
    17b2:	97 f9       	bld	r25, 7
    17b4:	9f 67       	ori	r25, 0x7F	; 127
    17b6:	80 e8       	ldi	r24, 0x80	; 128
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	08 95       	ret

000017be <__fp_nan>:
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	80 ec       	ldi	r24, 0xC0	; 192
    17c2:	08 95       	ret

000017c4 <__fp_pscA>:
    17c4:	00 24       	eor	r0, r0
    17c6:	0a 94       	dec	r0
    17c8:	16 16       	cp	r1, r22
    17ca:	17 06       	cpc	r1, r23
    17cc:	18 06       	cpc	r1, r24
    17ce:	09 06       	cpc	r0, r25
    17d0:	08 95       	ret

000017d2 <__fp_pscB>:
    17d2:	00 24       	eor	r0, r0
    17d4:	0a 94       	dec	r0
    17d6:	12 16       	cp	r1, r18
    17d8:	13 06       	cpc	r1, r19
    17da:	14 06       	cpc	r1, r20
    17dc:	05 06       	cpc	r0, r21
    17de:	08 95       	ret

000017e0 <__fp_round>:
    17e0:	09 2e       	mov	r0, r25
    17e2:	03 94       	inc	r0
    17e4:	00 0c       	add	r0, r0
    17e6:	11 f4       	brne	.+4      	; 0x17ec <__fp_round+0xc>
    17e8:	88 23       	and	r24, r24
    17ea:	52 f0       	brmi	.+20     	; 0x1800 <__fp_round+0x20>
    17ec:	bb 0f       	add	r27, r27
    17ee:	40 f4       	brcc	.+16     	; 0x1800 <__fp_round+0x20>
    17f0:	bf 2b       	or	r27, r31
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <__fp_round+0x18>
    17f4:	60 ff       	sbrs	r22, 0
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <__fp_round+0x20>
    17f8:	6f 5f       	subi	r22, 0xFF	; 255
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	08 95       	ret

00001802 <__fp_split3>:
    1802:	57 fd       	sbrc	r21, 7
    1804:	90 58       	subi	r25, 0x80	; 128
    1806:	44 0f       	add	r20, r20
    1808:	55 1f       	adc	r21, r21
    180a:	59 f0       	breq	.+22     	; 0x1822 <__fp_splitA+0x10>
    180c:	5f 3f       	cpi	r21, 0xFF	; 255
    180e:	71 f0       	breq	.+28     	; 0x182c <__fp_splitA+0x1a>
    1810:	47 95       	ror	r20

00001812 <__fp_splitA>:
    1812:	88 0f       	add	r24, r24
    1814:	97 fb       	bst	r25, 7
    1816:	99 1f       	adc	r25, r25
    1818:	61 f0       	breq	.+24     	; 0x1832 <__fp_splitA+0x20>
    181a:	9f 3f       	cpi	r25, 0xFF	; 255
    181c:	79 f0       	breq	.+30     	; 0x183c <__fp_splitA+0x2a>
    181e:	87 95       	ror	r24
    1820:	08 95       	ret
    1822:	12 16       	cp	r1, r18
    1824:	13 06       	cpc	r1, r19
    1826:	14 06       	cpc	r1, r20
    1828:	55 1f       	adc	r21, r21
    182a:	f2 cf       	rjmp	.-28     	; 0x1810 <__fp_split3+0xe>
    182c:	46 95       	lsr	r20
    182e:	f1 df       	rcall	.-30     	; 0x1812 <__fp_splitA>
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <__fp_splitA+0x30>
    1832:	16 16       	cp	r1, r22
    1834:	17 06       	cpc	r1, r23
    1836:	18 06       	cpc	r1, r24
    1838:	99 1f       	adc	r25, r25
    183a:	f1 cf       	rjmp	.-30     	; 0x181e <__fp_splitA+0xc>
    183c:	86 95       	lsr	r24
    183e:	71 05       	cpc	r23, r1
    1840:	61 05       	cpc	r22, r1
    1842:	08 94       	sec
    1844:	08 95       	ret

00001846 <__fp_zero>:
    1846:	e8 94       	clt

00001848 <__fp_szero>:
    1848:	bb 27       	eor	r27, r27
    184a:	66 27       	eor	r22, r22
    184c:	77 27       	eor	r23, r23
    184e:	cb 01       	movw	r24, r22
    1850:	97 f9       	bld	r25, 7
    1852:	08 95       	ret

00001854 <__gesf2>:
    1854:	66 d0       	rcall	.+204    	; 0x1922 <__fp_cmp>
    1856:	08 f4       	brcc	.+2      	; 0x185a <__gesf2+0x6>
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	08 95       	ret

0000185c <__mulsf3>:
    185c:	0b d0       	rcall	.+22     	; 0x1874 <__mulsf3x>
    185e:	c0 cf       	rjmp	.-128    	; 0x17e0 <__fp_round>
    1860:	b1 df       	rcall	.-158    	; 0x17c4 <__fp_pscA>
    1862:	28 f0       	brcs	.+10     	; 0x186e <__mulsf3+0x12>
    1864:	b6 df       	rcall	.-148    	; 0x17d2 <__fp_pscB>
    1866:	18 f0       	brcs	.+6      	; 0x186e <__mulsf3+0x12>
    1868:	95 23       	and	r25, r21
    186a:	09 f0       	breq	.+2      	; 0x186e <__mulsf3+0x12>
    186c:	a2 cf       	rjmp	.-188    	; 0x17b2 <__fp_inf>
    186e:	a7 cf       	rjmp	.-178    	; 0x17be <__fp_nan>
    1870:	11 24       	eor	r1, r1
    1872:	ea cf       	rjmp	.-44     	; 0x1848 <__fp_szero>

00001874 <__mulsf3x>:
    1874:	c6 df       	rcall	.-116    	; 0x1802 <__fp_split3>
    1876:	a0 f3       	brcs	.-24     	; 0x1860 <__mulsf3+0x4>

00001878 <__mulsf3_pse>:
    1878:	95 9f       	mul	r25, r21
    187a:	d1 f3       	breq	.-12     	; 0x1870 <__mulsf3+0x14>
    187c:	95 0f       	add	r25, r21
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	55 1f       	adc	r21, r21
    1882:	62 9f       	mul	r22, r18
    1884:	f0 01       	movw	r30, r0
    1886:	72 9f       	mul	r23, r18
    1888:	bb 27       	eor	r27, r27
    188a:	f0 0d       	add	r31, r0
    188c:	b1 1d       	adc	r27, r1
    188e:	63 9f       	mul	r22, r19
    1890:	aa 27       	eor	r26, r26
    1892:	f0 0d       	add	r31, r0
    1894:	b1 1d       	adc	r27, r1
    1896:	aa 1f       	adc	r26, r26
    1898:	64 9f       	mul	r22, r20
    189a:	66 27       	eor	r22, r22
    189c:	b0 0d       	add	r27, r0
    189e:	a1 1d       	adc	r26, r1
    18a0:	66 1f       	adc	r22, r22
    18a2:	82 9f       	mul	r24, r18
    18a4:	22 27       	eor	r18, r18
    18a6:	b0 0d       	add	r27, r0
    18a8:	a1 1d       	adc	r26, r1
    18aa:	62 1f       	adc	r22, r18
    18ac:	73 9f       	mul	r23, r19
    18ae:	b0 0d       	add	r27, r0
    18b0:	a1 1d       	adc	r26, r1
    18b2:	62 1f       	adc	r22, r18
    18b4:	83 9f       	mul	r24, r19
    18b6:	a0 0d       	add	r26, r0
    18b8:	61 1d       	adc	r22, r1
    18ba:	22 1f       	adc	r18, r18
    18bc:	74 9f       	mul	r23, r20
    18be:	33 27       	eor	r19, r19
    18c0:	a0 0d       	add	r26, r0
    18c2:	61 1d       	adc	r22, r1
    18c4:	23 1f       	adc	r18, r19
    18c6:	84 9f       	mul	r24, r20
    18c8:	60 0d       	add	r22, r0
    18ca:	21 1d       	adc	r18, r1
    18cc:	82 2f       	mov	r24, r18
    18ce:	76 2f       	mov	r23, r22
    18d0:	6a 2f       	mov	r22, r26
    18d2:	11 24       	eor	r1, r1
    18d4:	9f 57       	subi	r25, 0x7F	; 127
    18d6:	50 40       	sbci	r21, 0x00	; 0
    18d8:	8a f0       	brmi	.+34     	; 0x18fc <__mulsf3_pse+0x84>
    18da:	e1 f0       	breq	.+56     	; 0x1914 <__mulsf3_pse+0x9c>
    18dc:	88 23       	and	r24, r24
    18de:	4a f0       	brmi	.+18     	; 0x18f2 <__mulsf3_pse+0x7a>
    18e0:	ee 0f       	add	r30, r30
    18e2:	ff 1f       	adc	r31, r31
    18e4:	bb 1f       	adc	r27, r27
    18e6:	66 1f       	adc	r22, r22
    18e8:	77 1f       	adc	r23, r23
    18ea:	88 1f       	adc	r24, r24
    18ec:	91 50       	subi	r25, 0x01	; 1
    18ee:	50 40       	sbci	r21, 0x00	; 0
    18f0:	a9 f7       	brne	.-22     	; 0x18dc <__mulsf3_pse+0x64>
    18f2:	9e 3f       	cpi	r25, 0xFE	; 254
    18f4:	51 05       	cpc	r21, r1
    18f6:	70 f0       	brcs	.+28     	; 0x1914 <__mulsf3_pse+0x9c>
    18f8:	5c cf       	rjmp	.-328    	; 0x17b2 <__fp_inf>
    18fa:	a6 cf       	rjmp	.-180    	; 0x1848 <__fp_szero>
    18fc:	5f 3f       	cpi	r21, 0xFF	; 255
    18fe:	ec f3       	brlt	.-6      	; 0x18fa <__mulsf3_pse+0x82>
    1900:	98 3e       	cpi	r25, 0xE8	; 232
    1902:	dc f3       	brlt	.-10     	; 0x18fa <__mulsf3_pse+0x82>
    1904:	86 95       	lsr	r24
    1906:	77 95       	ror	r23
    1908:	67 95       	ror	r22
    190a:	b7 95       	ror	r27
    190c:	f7 95       	ror	r31
    190e:	e7 95       	ror	r30
    1910:	9f 5f       	subi	r25, 0xFF	; 255
    1912:	c1 f7       	brne	.-16     	; 0x1904 <__mulsf3_pse+0x8c>
    1914:	fe 2b       	or	r31, r30
    1916:	88 0f       	add	r24, r24
    1918:	91 1d       	adc	r25, r1
    191a:	96 95       	lsr	r25
    191c:	87 95       	ror	r24
    191e:	97 f9       	bld	r25, 7
    1920:	08 95       	ret

00001922 <__fp_cmp>:
    1922:	99 0f       	add	r25, r25
    1924:	00 08       	sbc	r0, r0
    1926:	55 0f       	add	r21, r21
    1928:	aa 0b       	sbc	r26, r26
    192a:	e0 e8       	ldi	r30, 0x80	; 128
    192c:	fe ef       	ldi	r31, 0xFE	; 254
    192e:	16 16       	cp	r1, r22
    1930:	17 06       	cpc	r1, r23
    1932:	e8 07       	cpc	r30, r24
    1934:	f9 07       	cpc	r31, r25
    1936:	c0 f0       	brcs	.+48     	; 0x1968 <__fp_cmp+0x46>
    1938:	12 16       	cp	r1, r18
    193a:	13 06       	cpc	r1, r19
    193c:	e4 07       	cpc	r30, r20
    193e:	f5 07       	cpc	r31, r21
    1940:	98 f0       	brcs	.+38     	; 0x1968 <__fp_cmp+0x46>
    1942:	62 1b       	sub	r22, r18
    1944:	73 0b       	sbc	r23, r19
    1946:	84 0b       	sbc	r24, r20
    1948:	95 0b       	sbc	r25, r21
    194a:	39 f4       	brne	.+14     	; 0x195a <__fp_cmp+0x38>
    194c:	0a 26       	eor	r0, r26
    194e:	61 f0       	breq	.+24     	; 0x1968 <__fp_cmp+0x46>
    1950:	23 2b       	or	r18, r19
    1952:	24 2b       	or	r18, r20
    1954:	25 2b       	or	r18, r21
    1956:	21 f4       	brne	.+8      	; 0x1960 <__fp_cmp+0x3e>
    1958:	08 95       	ret
    195a:	0a 26       	eor	r0, r26
    195c:	09 f4       	brne	.+2      	; 0x1960 <__fp_cmp+0x3e>
    195e:	a1 40       	sbci	r26, 0x01	; 1
    1960:	a6 95       	lsr	r26
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	81 1d       	adc	r24, r1
    1966:	81 1d       	adc	r24, r1
    1968:	08 95       	ret

0000196a <__udivmodhi4>:
    196a:	aa 1b       	sub	r26, r26
    196c:	bb 1b       	sub	r27, r27
    196e:	51 e1       	ldi	r21, 0x11	; 17
    1970:	07 c0       	rjmp	.+14     	; 0x1980 <__udivmodhi4_ep>

00001972 <__udivmodhi4_loop>:
    1972:	aa 1f       	adc	r26, r26
    1974:	bb 1f       	adc	r27, r27
    1976:	a6 17       	cp	r26, r22
    1978:	b7 07       	cpc	r27, r23
    197a:	10 f0       	brcs	.+4      	; 0x1980 <__udivmodhi4_ep>
    197c:	a6 1b       	sub	r26, r22
    197e:	b7 0b       	sbc	r27, r23

00001980 <__udivmodhi4_ep>:
    1980:	88 1f       	adc	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	5a 95       	dec	r21
    1986:	a9 f7       	brne	.-22     	; 0x1972 <__udivmodhi4_loop>
    1988:	80 95       	com	r24
    198a:	90 95       	com	r25
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	08 95       	ret

00001992 <__prologue_saves__>:
    1992:	2f 92       	push	r2
    1994:	3f 92       	push	r3
    1996:	4f 92       	push	r4
    1998:	5f 92       	push	r5
    199a:	6f 92       	push	r6
    199c:	7f 92       	push	r7
    199e:	8f 92       	push	r8
    19a0:	9f 92       	push	r9
    19a2:	af 92       	push	r10
    19a4:	bf 92       	push	r11
    19a6:	cf 92       	push	r12
    19a8:	df 92       	push	r13
    19aa:	ef 92       	push	r14
    19ac:	ff 92       	push	r15
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	ca 1b       	sub	r28, r26
    19bc:	db 0b       	sbc	r29, r27
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	09 94       	ijmp

000019ca <__epilogue_restores__>:
    19ca:	2a 88       	ldd	r2, Y+18	; 0x12
    19cc:	39 88       	ldd	r3, Y+17	; 0x11
    19ce:	48 88       	ldd	r4, Y+16	; 0x10
    19d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    19d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    19d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    19d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    19d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    19da:	aa 84       	ldd	r10, Y+10	; 0x0a
    19dc:	b9 84       	ldd	r11, Y+9	; 0x09
    19de:	c8 84       	ldd	r12, Y+8	; 0x08
    19e0:	df 80       	ldd	r13, Y+7	; 0x07
    19e2:	ee 80       	ldd	r14, Y+6	; 0x06
    19e4:	fd 80       	ldd	r15, Y+5	; 0x05
    19e6:	0c 81       	ldd	r16, Y+4	; 0x04
    19e8:	1b 81       	ldd	r17, Y+3	; 0x03
    19ea:	aa 81       	ldd	r26, Y+2	; 0x02
    19ec:	b9 81       	ldd	r27, Y+1	; 0x01
    19ee:	ce 0f       	add	r28, r30
    19f0:	d1 1d       	adc	r29, r1
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	ed 01       	movw	r28, r26
    19fe:	08 95       	ret

00001a00 <_exit>:
    1a00:	f8 94       	cli

00001a02 <__stop_program>:
    1a02:	ff cf       	rjmp	.-2      	; 0x1a02 <__stop_program>
